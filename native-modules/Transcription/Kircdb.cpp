///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Projektas LIEPA (https://liepa.raðtija.lt)
// Sintezatoriaus komponentas transcrLUSS.dll
// Failas KircDB.cpp
// Autorius dr. Pijus Kasparaitis (pkasparaitis@yahoo.com)
// 2015 08 11
//
///////////////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "Kircdb.h"
#include "Vb9r1_13.h"
#include "db8r1_14.h"
#include "nb12.h"
#include "vgal.h"

#define ZODIL1    50   //maksimalus zodzio ilgis
#define VKGIL1   100   //veiksmazodzio kamienu ir galuniu variantu skaicius
#define VPKGIL1  100   //veiksmazodzio priesdeliu, kamienu ir galuniu variantu skaicius
#define VPKGNIL1 100   //veiksmazodzio priesdeliu, kamienu ir galuniu numeriu variantu skaicius
#define DKGIL1    30   //daiktavardzio kamienu ir galuniu variantu skaicius
#define DKGNIL1  100   //daiktavardzio kamienu ir galuniu numeriu variantu skaicius
#define DKGLIL1   30   //daiktavardzio kamienu, galuniu ir linksniu variantu skaicius
#define NIL1      30   //nekaitomu zodziu variantu skaicius
#define VARSK1    10   //kirciavimo variantu skaicius

// prideta papildoma funkcija, kurios linux gcc nepalaiko
char* strrev1(char *p)
{
	int i;
	int cb= strlen(p)-1;
 
	for(i=0;i<cb;i++,cb--)
		{
		char c = p[i];
		p[i]=p[cb];
		p[cb]=c;
		}

	return p;
}

struct GaluniuMasyvas{const char *Galune; char ArMinksta; char KirciuotaRaide; char Priegaide;}
GalMasDB[231] = {
/*00*/  {"SISA",   0, 3, 0},   /*01*/  {"OJO",     0, 2, 2},   /*02*/  {"MAJA",   0, 3, 1},
/*03*/  {"ÁJÀ",    0, 2, 2},   /*04*/  {"UJOU",    0, 3, 1},   /*05*/  {"EMAJA",  0, 4, 2},
/*--T+  {"MAJA",   0, 3, 2},*/ /*06*/  {"IJEI",    0, 3, 1},   /*07*/  {"ØJØ",    0, 2, 2},
/*08*/  {"SMEISEI",0, 6, 1},   /*09T*/ {"MEISEI",  0, 5, 1},   /*10*/  {"SUISOU", 0, 5, 1},
/*11*/  {"SIAISIA",0, 5, 2},   /*12*/  {"ESOUISOU",0, 6, 2},   /*13T*/ {"SOUISOU",0, 5, 2},

/*14*/  {"IJO",    0, 2, 1},   /*15*/  {"SOISO",   0, 4, 2},   /*16*/  {"IAJA",   0, 3, 1}, 
/*17*/  {"ÀJÀ",    0, 2, 2},   /*18*/  {"AJÀ",     0, 2, 1},   /*19*/  {"EJOJO",  0, 4, 2}, 
/*20T*/ {"JOJO",   0, 3, 2},   /*21*/  {"SMOISO",  0, 5, 1},   /*22T*/ {"MOISO",  0, 4, 1}, 
/*23*/  {"SAISÀ",  0, 4, 1},   /*24*/  {"SIMOISO", 0, 6, 2},   /*--T-  {"MOISO",  0, 4, 2},*/  
/*25*/  {"ESOISO", 0, 5, 2}, 

/*26*/  {"SISAI",  1, 3, 0},   /*27*/  {"OJOI",    1, 2, 2},   /*28*/  {"MAJAI",  1, 3, 1}, 
/*29*/  {"ÁJÀI",   1,-1,-1},   /*30*/  {"UJOUI",   1, 3, 1},   /*31*/  {"EMAJAI", 1, 4, 2}, 
/*--T+  {"MAJAI",  1, 3, 2},*/ /*32*/  {"ØJØI",    1, 2, 2},   /*33*/  {"SUISOUI",1, 5, 1}, 
/*34*/  {"SIAISIAI",1,5, 2},   /*35*/  {"ESOUISOUI",1,6, 2},   /*36T*/ {"SOUISOUI",1,5, 2}, 

/*37*/  {"IJOI",   1, 2, 1},   /*38*/  {"SOISOI",  1, 4, 2},   /*39*/  {"IAJAI",  1, 3, 1}, 
/*40*/  {"ÀJÀI",   1, 2, 2},   /*41*/  {"AJÀI",    1, 2, 1},   /*42*/  {"EJOJOI", 1, 4, 2}, 
/*43T*/ {"JOJOI",  1, 3, 2},   /*44*/  {"SMOISOI", 1, 5, 1},   /*45T*/ {"MOISOI", 1, 4, 1}, 
/*46*/  {"SAISÀI", 1, 4, 1},   /*47*/  {"SIMOISOI",1, 6, 2},   /*--T-  {"MOISOI", 1, 4, 2},*/  
/*48*/  {"ESOISOI",1, 5, 2}, 

/*49*/  {"SISY",   0, 3, 2},   /*50*/  {"ÁJÁ",     0, 2, 2},   /*51*/  {"SISU",   0, 3, 0}, 
/*52*/  {"ÁJØ",    0,-1,-1}, 

/*53*/  {"SA",   0, 1, 0},   /*54*/  {"O",    0, 0, 2},   /*55*/   {"IU",   0,-1,-1}, 
/*56*/  {"À",    0, 0, 2},   /*57*/  {"U",    0, 0, 0},   /*58*/   {"E",    0, 0, 0}, 
/*59*/  {"IA",   0, 0, 2},   /*60*/  {"Ø",    0, 0, 2},   /*61*/   {"SMA",  0, 2, 1}, 
/*++T+  {"MA",   0, 1, 1},*/ /*62*/  {"SU",   0, 1, 0},   /*63*/   {"SIA",  0, 1, 2}, 
/*64*/  {"ESOU", 0, 0, 0},   /*65T*/ {"SOU",  0, 1, 2}, 

/*66*/  {"EJU",  0, 0, 0},   /*67T*/ {"JU",   0, 1, 0},   /*68*/   {"EJY",  0, 0, 0}, 
/*++T+  {"Y",    0, 0, 2},*/ /*69*/  {"UA",   0, 0, 2}, 

/*70*/  {"SAI",  1, 1, 0},   /*71*/  {"OI",   1, 0, 2},   /*72*/   {"IUI",  1,-1,-1}, 
/*73*/  {"ÀI",   1, 0, 2},   /*74*/  {"UI",   1, 0, 0},   /*75*/   {"Y",    0, 0, 2}, 
/*76*/  {"I",    0, 0, 0},   /*77*/  {"IAI",  1, 0, 2},   /*78*/   {"ØI",   1, 0, 2}, 
/*79*/  {"SMAI", 1, 2, 1},   /*++T+  {"MAI",  1, 1, 1},*/ /*80*/   {"SUI",  1, 1, 0}, 
/*81*/  {"SIAI", 1, 1, 2},   /*82*/  {"ESOUI",1, 0, 0},   /*83T*/  {"SOUI", 1, 1, 2}, 

/*84*/  {"SI",   0, 1, 0},   /*85*/  {"Á",    0,0,2/*-1,-1*/},   /*86*/   {"SY",   0, 1, 2}, 

/*87*/  {"A",    0, 0, 0},   /*88*/  {"SO",   0, 1, 2},   /*89*/   {"EJO",  0, 0, 0}, 
/*90T*/ {"JO",   0, 1, 2},   /*91*/  {"SMO",  0, 2, 1},   /*92T*/  {"MO",   0, 1, 1}, 
/*93*/  {"SIMO", 0, 1, 0},   /*--T-  {"MO",   0, 1, 2},   /*94*/   {"ESO",  0, 0, 0}, 

/*95*/  {"AI",   1, 0, 0},   /*96*/  {"SOI",  1, 1, 2},   /*97*/   {"EJOI", 1, 0, 0}, 
/*98T*/ {"JOI",  1, 1, 2},   /*99*/  {"SMOI", 1, 2, 1},   /*100T*/ {"MOI",  1, 1, 1}, 
/*101*/ {"SIMOI",1, 1, 0},   /*--T-  {"MOI",  1, 1, 2},*/ /*102*/  {"ESOI", 1, 0, 0}, 

/*103*/ {"Ë",    0, 0, 2},   /*104*/ {"SË",   0, 1, 2},   /*105*/  {"IE",   0,-1,-1}, 
/*106*/ {"Æ",    0,-1,-1},   /*107*/ {"EJË",  0, 0, 0},   /*108T*/ {"JË",   0, 1, 2}, 
/*109*/ {"SMË",  0, 2, 1},   /*110T*/{"MË",   0, 1, 1},   /*111*/  {"SE",   0, 1, 0}, 
/*112*/ {"SIMË", 0, 1, 0},   /*--T-  {"MË",   0, 1, 2},*/ /*113*/  {"ESË",  0, 0, 0}, 

/*114*/ {"SEI",  0, 1, 2},   /*115*/ {"IMI",  0, 0, 0},   /*--T-   {"MI",   0, 0, 2},*/  
/*116*/ {"EI",   0, 0, 2},   /*117?*/{"SMI",  0, 2, 1},   /*118T?*/{"MI",   0, 1, 1}, 
/*119*/ {"SIMI", 0, 1, 0},   /*--T-  {"MI",   0, 0, 2},*/ /*120*/  {"ESY",  0, 0, 0}, 

/*121*/ {"SUA",  0, 1, 2},   /*122*/ {"IMU",  0, 0, 0},   /*--T-   {"MU",   0, 0, 2},*/  
/*123*/ {"SÛ",   0,1,2/*-1,-1*/},   /*124?*/{"SMU",  0, 2, 1},   /*125T?*/{"MU",   0, 1, 1}, 
/*126*/ {"SIMU", 0, 1, 0}, 

/*127*/ {"SUAI", 1,-1,-1},   /*128*/ {"IMUI", 1,-1,-1},   /*129T*/ {"MUI",  1,-1,-1}, 
/*130*/ {"EJUI", 1,-1,-1},   /*131T*/{"JUI",  1,-1,-1},   /*132*/  {"UAI",  1, 0, 2}, 

/*133*/ {"S",  0, 1, 2},

/*134*/ {"MA",   0, 1, 1},   /*135*/ {"EMA",  0, 0, 0},   /*--T+   {"MA",   0, 0, 2},*/  
/*136*/ {"SMEI", 0, 3, 1},   /*137T*/{"MEI",  0, 2, 1},   /*138*/  {"MAI",  1, 1, 1}, 
/*139*/ {"EMAI", 1, 0, 0},   /*--T+  {"MAI",  1, 0, 2},*/

/*306->168-140*/ {"UAILË", 1, 0, 2},
//nesimasis
/*141*/ {"ISO", 0, -1, -1},  /*142*/ {"ISIU", 0, -1, -1}, /*143*/ {"ISÀ", 0, -1, -1},
/*144*/ {"ISU", 0, -1, -1},  /*145*/ {"ISE", 0, -1, -1},  /*146*/ {"ISIA", 0, -1, -1}, 	
/*147*/ {"ISØ", 0, -1, -1},  /*148*/ {"ISMA", 0, -1, -1}, /*149*/ {"ISIA", 0, -1, -1},
/*150*/ {"ISOU", 0, -1, -1}, 	
		
//du,dvi	
/*151*/ {"IV", 0, 0, 0},     /*152*/ {"ØJEIV", 0, 0, 2},    /*153*/ {"MEIV", 0, 2, 1},
/*154*/ {"MEIV", 0, 1, 2},   /*155*/ {"ESOUJEIV", 0, 0, 0}, /*156*/ {"SOUJEIV", 0, 1, 2},
/*157*/ {"ESOJEIV", 0, 0, 0},
//trys	
/*158*/ {"ØJI", 0, 0, 2}, 	 /*159*/ {"ESOUJI", 0, 0, 0},   /*160T*/ {"SOUJI", 0, 1, 2}, 
/*161*/ {"ESOJI", 0, 0, 0}, 
//juodu,jiedvi
/*162*/ {"UDOU", 0, 2, 2} ,   /*163*/ {"UDEI", 0, 2, 2},    /*164*/ {"ØJEIVDØ", 0, 6, 2},
/*165*/ {"MEIVDEI", 0, 6, 1}, /*166*/ {"MEIVDMEI", 0, 7, 1},/*167*/ {"MEIVDEI", 0, 5, 2},
/*168*/ {"MEIVDMEI", 0, 6, 2},/*169*/ {"IVDEI", 0, 3, 2},
/*170*/ {"IVDOU", 0, 3, 2},   /*171*/ {"IVDO", 0, 3, 2},
/*172*/ {"MEIVDO", 0, 5, 1},  /*173*/ {"MEIVDMO", 0, 6, 1},
/*174*/ {"MEIVDO", 0, 5, 2},  /*175*/ {"MEIVDMO", 0, 6, 2},
//siuodu,siedvi
/*176*/ {"UDOUI", 1, 2, 2},   /*177*/ {"ØJEIVDØI", 1, 6, 2},/*178*/ {"IVDOUI", 1, 3, 2},
/*179*/ {"IVDOI", 1, 3, 2},	  /*180*/ {"MEIVDOI", 1, 5, 1}, /*181*/ {"MEIVDMOI", 1, 6, 1},
/*182*/ {"MEIVDOI", 1, 5, 2}, /*183*/ {"MEIVDMOI", 1, 6, 2},
//mudu
/*184*/ {"UDU", 0, 2, 0},
//abu
/*185*/ {"ØJEI", 0, 0, 2},    /*186*/ {"MEI", 0, 2, 1},     /*187*/ {"MEI", 0, 1, 2},
/*188*/ {"ESOUJEI", 0, 0, 0}, /*189*/ {"SOUJEI", 0, 1, 2},
/*190*/ {"IVDI", 0, 3, 0},    /*191*/ {"ESOJEI", 0, 0, 0},
//jai,siai,juo,siuo
/*192*/ {"IA", 0/*1*/, 1, 1}, /*193*/ {"IAI", 1/*0*/, 1, 1},
/*194*/ {"OU", 0, 0, 2},      /*195*/ {"OUI", 1, 0, 2},
//as
/*196*/ {"SÆNA", 0, 1, 2},   /*197*/ {"ONA", 0, 2, 0},      /*198*/ {"NA", 0, 1, 1},
/*199*/ {"ENA", 0, 0, 0},    /*200*/ {"IMINA", 0, 0, 0},
/*201*/ {"EJYNA", 0, 0, 0},  /*202T*/{"YNA", 0, 0, 2},
//tu
/*203*/ {"SÆVA", 0, 1, 2},   /*204*/ {"OVA", 0, 2, 0},      /*205*/ {"UA", 0, 1, 1},
/*206*/ {"EVA", 0, 0, 0},    /*207*/ {"IMIVA", 0, 0, 0},
/*208*/ {"EJYVA", 0, 0, 0},  /*209T*/{"YVA", 0, 0, 2},
//mes
/*210*/ {"SE", 0, 1, 2},     /*211*/ {"ØSÛ", 0, 2, 1},      /*212*/ {"ESYMU", 0, 0, 0},
//pats
/*213*/ {"S", 0, 2, 0},
//tasai~,sisai~,patsai~
/*214*/ {"IASA", 0, 0, 2},   /*215*/ {"IASI", 0, 0, 2},     /*216*/ {"IAS", 0, 0, 2},
//kieno
/*217*/ {"ONEI", 0, 0, 2},
//manim~, tavim~, savim~
/*218*/ {"MINA", 0, 0, 2},   /*219*/{"MIVA", 0, 0, 2},

/*220--T+*/  {"MAJA",   0, 3, 2},
/*221--T-*/  {"MOISO",  0, 4, 2},  
/*222--T+*/  {"MAJAI",  1, 3, 2},
/*223--T-*/  {"MOISOI", 1, 4, 2},  
/*224--T-*/  {"MO",   0, 1, 2},
/*225--T-*/  {"MOI",  1, 1, 2},
/*226--T-*/  {"MË",   0, 1, 2},
/*227--T-*/  {"MI",   0, 0, 2},  
/*228--T-*/  {"MU",   0, 0, 2},  
/*229--T+*/  {"MA",   0, 0, 2},  
/*230--T+*/  {"MAI",  1, 0, 2}};

char KamTip_KirtRink[108][4] = {
/*00*/ { 0, 1, 5,14},
/*01*/ { 0, 2, 5,14},
/*02*/ { 0, 2, 5,15},
/*03*/ { 0, 2, 5,14},
/*04*/ { 0, 2, 6,16},
/*05*/ { 0, 3, 7,17},
/*06*/ { 0, 2, 7,17},
/*07*/ { 0, 2, 7,17},
/*08*/ { 0, 2, 7,17},
/*09*/ { 0, 4, 8,18},
/*10*/ { 0, 4, 8,18},
/*11*/ { 0, 4, 8,18},
/*12*/ { 0, 4, 8,18},
/*13*/ { 0, 4, 8,18},
/*14*/ { 0, 4, 9,18},
/*15*/ { 0, 4, 9,18},
/*16*/ { 0, 2,10,19},
/*17*/ { 0, 2, 7,17},
/*18*/ { 0, 2,10,19},
/*19*/ { 0, 2, 7,17},
/*20*/ { 0, 2,10,19},
/*21*/ { 0, 2,11,20},
/*22*/ { 0, 2,12,21},
/*23*/ { 0, 2, 7,17},
/*24*/ { 0, 2, 0, 0},
/*25*/ { 0, 2, 0, 0},
/*26*/ { 0, 2,13,22},
/*27*/ { 0, 2, 7,17},
/*28*/ { 0,21,21,21},
/*29*/ { 0,17,17,17},
/*30*/ { 0,21,21,21},
/*31*/ { 0,17,17,17},
/*32*/ { 0,21,21,21},
/*33*/ { 0,21,21,21},
/*34*/ { 0, 2, 5,14},
/*35*/ { 0, 2, 6,16},
/*36*/ { 0, 2, 7,17},
/*37*/ { 0, 2,10,19},
/*38*/ { 0, 2, 7,17},
/*39*/ { 0, 2, 0, 0},
/*40*/ { 0, 2, 0, 0},
/*41*/ { 0, 2,13,22},
/*42*/ { 0, 2, 7,17},
/*43*/ { 0,21,21,21},
/*44*/ { 0, 0,10,19},
/*45*/ { 0, 0, 7,17},
/*46*/ { 0, 0, 0,19},
/*47*/ { 0, 0, 0,17},
/*48*/ { 0, 0, 0, 0},
/*49*/ { 0, 0,10, 0},
/*50*/ { 0, 0, 7, 0},
/*51*/ { 0, 0,10,19},
/*52*/ { 0, 0, 7,17},
/*53*/ { 0, 0,10, 0},
/*54*/ { 0, 0, 7, 0},
/*55*/ { 0, 0, 0,23},
/*56*/ { 0, 0, 0,23},
/*57*/ { 0, 0, 0,23},
/*58*/ { 0, 0, 0,23},
/*59*/ { 0, 0,10,19},
/*60*/ { 0, 0, 7,17},
/*61*/ { 0, 0, 8, 0},
/*62*/ { 0, 0, 0, 0},
/*63*/ { 0, 0, 0, 0},
/*64*/ { 0, 1, 0,14},
/*65*/ { 0, 0, 0, 0},
/*66*/ { 0, 0, 0,23},
/*67*/ { 0, 0, 0,23},
/*68*/ { 0, 0, 0,23},
/*69*/ { 0, 0, 0,23},
/*70*/ { 0, 0, 0,23},
/*71*/ { 0, 0, 0,23},
/*72*/ { 0, 0, 0,23},
/*73*/ { 0, 0, 0,23},
/*74*/ { 0, 0, 0,23},
/*75*/ { 0, 0, 0,23},
/*76*/ { 0, 0, 0,23},
/*77*/ { 0, 0, 0,17},
/*78*/ { 0, 0, 7, 0},
/*79*/ { 0, 0, 7,17},
/*80*/ { 0, 0, 0,23},
/*81*/ { 0, 0, 0,23},
/*82*/ { 0, 0,10, 0},
/*83*/ { 0, 0,10,19},
/*84*/ { 0, 0, 0,23},
/*85*/ { 0, 0, 0,23},
/*86*/ { 0, 0, 0,23},
/*87*/ { 0, 0, 0,23},
/*88*/ { 0, 0, 0,23},
/*89*/ { 0,21,21,21},
/*90*/ { 0,17,17,17},
/*91*/ { 0,21,21,21},
/*92*/ { 0,17,17,17},
/*93*/ { 0, 0, 0,22},
/*94*/ { 0, 0, 0,19},
/*95*/ { 0, 0, 0,23},
/*96*/ { 0, 0, 0,23},
/*97*/ { 0, 0, 0,23},
/*98*/ { 0, 0, 0,23},
/*99*/ { 0, 0, 0,23},
/*100*/{ 0, 0, 0,23},
/*101*/{ 0, 0, 0,23},
/*102*/{ 0, 0, 0,21},
/*103*/{ 0, 0, 0,17},
/*104*/{ 0, 0, 0,23},
/*105*/{23,23,23,23},
/*106*/{0, 1, 5, 14},
/*107*/{0, 0, 0, 0 }};

char KirciuRinkiniai[24/*23*/][18] = {
// I k. VV.VK.VN.VG.VI.VVtVS.  DV.DK.DN.DG.DI.DVt     BG prv al al
/* 0*/ { 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 0,   1, 2, 0, 0},  // visi
// II k.
/* 1*/ { 1, 1, 1, 1, 0, 0, 1,   1, 1, 1, 0, 1, 1, 0,   1, 0, 0, 0},  // pirstas
/* 2*/ { 1, 1, 1, 1, 0, 1, 1,   1, 1, 1, 0, 1, 1, 0,   1, 0, 0, 0},  // galvijas, versis, drauge, vilnonis, vilnone
/* 3*/ { 0, 1, 1, 1, 0, 1, 1,   1, 1, 1, 0, 1, 1, 0,   0, 0, 0, 0},  // ranka
/* 4*/ { 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 0, 1, 1, 0,   1, 0, 0, 0},  // turgus, pavojus, vaisius
// III k.
/* 5*/ { 1, 1, 1, 1, 1, 0, 1,   0, 0, 0, 1, 0, 0, 0,   1, 0, 0, 0},  // langas, velnias
/* 6*/ { 0, 1, 1, 1, 1, 0, 0,   0, 0, 0, 1, 0, 0, 0,   0, 0, 0, 0},  // zaltys
/* 7*/ { 0, 0, 1, 1, 1, 0, 1,   1, 0, 0, 1, 0, 0, 0,   0, 0, 0, 0},  // galva,giesme,jauna,atzagaria,desine,gardi
/* 8*/ { 0, 0, 1, 1, 0, 0, 0,   1, 0, 0, 1, 0, 0, 0,   0, 0, 0, 0},  // sirdis, zveris, sunus
/* 9*/ { 0, 0, 1, 1, 1, 0, 0,   1, 0, 0, 1, 0, 0, 0,   0, 0, 0, 0},  // vanduo, dukte
/*10*/ { 1, 1, 0, 1, 1, 0, 2,   0, 0, 0, 1, 0, 0, 0,   1, 2, 0, 0},  // jaunas, atzagarias, didelis
/*11*/ { 1, 0, 1, 1, 1, 0, 2,   1, 0, 0, 1, 0, 0, 0,   1, 2, 0, 0},  // didele
/*12*/ { 0, 1, 0, 1, 1, 0, 2,   0, 0, 0, 1, 0, 0, 0,   0, 2, 0, 0},  // desinys
/*13*/ { 0, 0, 0, 1, 1, 0, 2,   1, 0, 0, 1, 0, 0, 0,   0, 2, 0, 0},  // gardus
// IV k.
/*14*/ { 1, 1, 1, 1, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0},  // vaikas
/*15*/ { 1, 1, 1, 1, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0},  // kelias
/*16*/ { 0, 1, 1, 1, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0},  // gaidys
/*17*/ { 0, 0, 1, 1, 0, 0, 1,   1, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0},  // ziema,valdzia,pati,kede,gera,zalia,kaire,slidi
/*18*/ { 0, 0, 1, 1, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0},  // pirtis, vagis, virsus
/*19*/ { 1, 1, 0, 1, 0, 0, 2,   0, 0, 0, 0, 0, 0, 0,   1, 2, 0, 0},  // geras, zalias, geresnis
/*20*/ { 1, 0, 1, 1, 0, 1, 2,   1, 0, 0, 0, 0, 0, 0,   1, 2, 0, 0},  // geresne
/*21*/ { 0, 1, 0, 1, 0, 0, 2,   0, 0, 0, 0, 0, 0, 0,   0, 2, 0, 0},  // kairys 
/*22*/ { 0, 0, 0, 1, 0, 0, 2,   1, 0, 0, 0, 0, 0, 0,   0, 2, 0, 0},  // slidus
/*23*/ { 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0}}; // du, dvi, trys

	short int GalViet[108][20][2] = {
//00  langas
{{0, 53}, {1, 54}, {2, 55}, {3, 56}, { 4, 57}, { 5, 58}, { 6, 58},
//AS       O        UI       A        U         E         E
 {7, 59}, {8, 60}, {9, 61}, {9,134}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//AI       U        AMS      AM       US        AIS       UOSE      UOS
//01  vejas
{{0, 53}, {1, 54}, {2, 55}, {3, 56}, { 4, 57}, { 5, 66}, { 5, 67}, { 5, 68}, { 5, 75}, { 6, 69},
//AS       O        UI       A        U         UJE       UJ        YJE       Y         AU
 {7, 59}, {8, 60}, {9, 61}, {9,134}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//AI       U        AMS      AM       US        AIS       UOSE      UOS
//02  kelias
{{0, 70}, {1, 71}, {2, 72}, {3, 73}, { 4, 74}, { 5, 68}, { 5, 75}, { 6, 76}, { 6, 58}, { 6, 75},
//IAS      IO       IUI      IA       IU        YJE       Y         I         E         Y
 {7, 77}, {8, 78}, {9, 79}, {9,138}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//IAI      IU       IAMS     IAM      IUS       IAIS      IUOSE     IUOS
//03  versis
{{0, 84}, {1, 71}, {2, 72}, {3, 85}, { 4, 74}, { 5, 68}, { 5, 75}, { 6, 76},
//IS       IO       IUI      I        IU        YJE       Y         I
 {7, 77}, {8, 78}, {9, 79}, {9,138}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//IAI      IU       IAMS     IAM      IUS       IAIS      IUOSE     IUOS
//04  gaidys
{{0, 86}, {1, 71}, {2, 72}, {3, 85}, { 4, 74}, { 5, 68}, { 5, 75}, { 6, 75},
//YS       IO       IUI      I        IU        YJE       Y         Y
 {7, 77}, {8, 78}, {9, 79}, {9,138}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//IAI      IU       IAMS     IAM      IUS       IAIS      IUOSE     IUOS
//05  galva
{{0, 87}, {1, 88}, {2, 59}, {3, 56}, { 4, 87}, { 5, 89}, { 5, 90}, { 6, 87},
//A        OS       AI       A        A         OJE       OJ        A
 {7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11, 224}, {12, 94}, {-1, -1}},
//OS       U        OMS      OM       AS        OMIS      O~M        OSE
//06  pirkia
{{0, 95}, {1, 96}, {2, 77}, {3, 73}, { 4, 95}, { 5, 97}, { 5, 98}, { 6, 95},
//IA       IOS      IAI      IA       IA        IOJE      IOJ       IA
 {7, 96}, {8, 78}, {9, 99}, {9,100}, {10, 70}, {11,101}, {11,225}, {12,102}, {-1, -1}},
//IOS      IU       IOMS     IOM      IAS       IOMIS     IO~M      IOSE
//07  pati
{{0, 76}, {1, 96}, {2, 77}, {3, 73}, { 4, 95}, { 5, 97}, { 5, 98}, { 6, 95},
//I        IOS      IAI      IA       IA        IOJE      IOJ       IA
 {7, 96}, {8, 78}, {9, 99}, {9,100}, {10, 70}, {11,101}, {11,225}, {12,102}, {-1, -1}},
//IOS      IU       IOMS     IOM      IAS       IOMIS     IO~M      IOSE
//08  giesme
{{0,103}, {1,104}, {2,105}, {3,106}, { 4, 58}, { 5,107}, { 5,108}, { 6, 58},
//E        ES       EI       E        E         EJE       EJ        E
 {7,104}, {8, 78}, {9,109}, {9,110}, {10,111}, {11,112}, {11,226}, {12,113}, {-1, -1}},
//ES       IU       EMS      EM       ES        EMIS      E~M       ESE
//09  sirdis
{{0, 84}, {1,114}, {2, 77}, {3, 85}, { 4,115}, { 4,227}, { 5, 68}, { 5, 75}, { 6,116},
//IS       IES      IAI      I        IMI       IM~       YJE       Y         IE
 {7, 86}, {8, 78}, {8, 60}, {9,117}, { 9,118}, {10, 84}, {11,119}, {11,227}, {12,120}, {-1, -1}},
//YS       IU       U        IMS      IM        IS        IMIS      IM~       YSE
//10  zveris
{{0, 84}, {1,114}, {2, 72}, {3, 85}, { 4,115}, { 4,227}, { 5, 68}, { 5, 75}, { 6,116},
//IS       IES      IUI      I        IMI       IM~       YJE       Y         IE
 {7, 86}, {8, 78}, {8, 60}, {9,117}, { 9,118}, {10, 84}, {11,119}, {11,227}, {12,120}, {-1, -1}},
//YS       IU       U        IMS      IM        IS        IMIS      IM~       YSE
//11  sunus
{{0, 62}, {1,121}, {2, 55}, {3, 60}, { 4,122}, { 4,228}, { 5, 66}, { 5, 67}, { 6, 69},
//US       AUS      UI       U        UMI       UM~       UJE       UJ        AU
 {7,123}, {8, 60}, {9,124}, {9,125}, {10, 62}, {11,126}, {11,228}, {12, 64}, {12, 65}, {-1, -1}},
//US       U        UMS      UM       US        UMIS      UM~       UOSE      UOS
//12  pavojus
{{0, 62}, {1,121}, {2, 55}, {3, 60}, { 4,122}, { 4,228}, { 5, 66}, { 5, 67}, { 6, 69},
//US       AUS      UI       U        UMI       UM        UJE       UJ        AU
 {7, 59}, {8, 60}, {9, 61}, {9,134}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//AI       U        AMS      AM       US        AIS       UOSE      UOS
//13  vaisius
{{0, 80}, {1,127}, {2, 72}, {3, 78}, { 4,128}, { 4,129}, { 5,130}, { 5,131}, { 6,132},
//IUS      IAUS     IUI      IU       IUMI      IUM       IUJE      IUJ       IAU
 {7, 77}, {8, 78}, {9, 79}, {9,138}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//IAI      IU       IAMS     IAM      IUS       IAIS      IUOSE     IUOS
//14  vanduo
{{1,133}, {2, 72}, {3, 85}, { 4, 74}, { 5, 68}, { 5, 75}, { 6,116},
//ENS      ENIUI    ENI      ENIU      ENYJE     ENY       ENIE
 {7, 86}, {8, 60}, {9,117}, {9,118}, {10, 84}, {11,119}, {11,227}, {12,120}, {-1, -1}},
//ENYS     ENU      ENIMS    ENIM     ENIS      ENIMIS    ENIM~     ENYSE
//15  sesuo,dukte
{{1,133}, {2, 77}, { 3, 85}, { 4, 95}, { 5, 68}, { 5, 75}, { 6,116},
//ERS      ERIAI    ERI       ERIA      ERYJE     ERY       ERIE
 {7, 86}, {8, 60}, {9,117}, {9,118}, {10, 84}, {11,119}, {11,227}, {12,120}, {-1, -1}},
//ERYS     ERU      ERIMS    ERIM     ERIS      ERIMIS    ERIM~     ERYSE
//16  geras
{{0, 53}, {1, 54}, {2,134}, {3, 56}, { 4, 57}, { 5,135}, { 5,229}, {14, 87}, {15, 59}, {16,132}, {17,140},
//AS       O        AM       A        U         AME       AM~       b.g.      prvm.
 {7, 76}, {8, 60}, {9,136}, {9,137}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//I        U        IEMS     IEM      US        AIS       UOSE      UOS
//17  gera
{{0, 87}, {1, 88}, {2, 59}, {3, 56}, { 4, 87}, { 5, 89}, { 5, 90},
//A        OS       AI       A        A         OJE       OJ
 {7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS       U        OMS      OM       AS        OMIS      O~M       OSE
//18  zalias
{{0, 70}, {1, 71}, {2,138}, {3, 73}, { 4, 74}, { 5,139}, { 5,230}, {14, 95}, {15, 77}, {16,132}, {17,140},
//IAS      IO       IAM      IA       IU        IAME      IAM~      b.g.     prvm.
 {7, 76}, {8, 78}, {9,136}, {9,137}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//I        IU       IEMS     IEM      IUS       IAIS      IUOSE     IUOS
//19  zalia
{{0, 95}, {1, 96}, {2, 77}, {3, 73}, { 4, 95}, { 5, 97}, { 5, 98},
//IA       IOS      IAI      IA       IA        IOJE      IOJ
 {7, 96}, {8, 78}, {9, 99}, {9,100}, {10, 70}, {11,101}, {11,225}, {12,102}, {-1, -1}},
//IOS      IU       IOMS     IOM      IAS       IOMIS     IO~M      IOSE
//20  geresnis
{{0, 84}, {1, 71}, {2,138}, {3, 85}, { 4, 74}, { 5,139}, { 5,230}, //{ 6, 77},???
//IS       IO       IAM      I        IU        IAME      IAM~        prvm.
 {7, 76}, {8, 78}, {9,136}, {9,137}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//I        IU       IEMS     IEM      IUS       IAIS      IUOSE     IUOS
//21  geresne
{{0,103}, {1,104}, {2,105}, {3,106}, { 4, 58}, { 5,107}, { 5,108},
//E        ES       EI       E        E         EJE       EJ
 {7,104}, {8, 78}, {9,109}, {9,110}, {10,111}, {11,112}, {11,226}, {12,113}, {-1, -1}},
//ES       IU       EMS      EM       ES        EMIS      E~M       ESE
//22  desinys
{{0, 86}, {1, 71}, {2,138}, {3, 85}, { 4, 74}, { 5,139}, { 5,230}, {15, 77}, {16,132}, {17,140},
//YS       IO       IAM      I        IU        IAME      IAM~      prvm.
 {7, 76}, {8, 78}, {9,136}, {9,137}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//I        IU       IEMS     IEM      IUS       IAIS      IUOSE     IUOS
//23  desine
{{0,103}, {1,104}, {2,105}, {3,106}, { 4, 58}, { 5,107}, { 5,108},
//E        ES       EI       E        E         EJE       EJ
 {7,104}, {8, 78}, {9,109}, {9,110}, {10,111}, {11,112}, {11,226}, {12,113}, {-1, -1}},
//ES       IU       EMS      EM       ES        EMIS      E~M       ESE
//24  medinis
{{0, 84}, {1, 71}, {2,138}, {3, 85}, { 4, 74}, {5, 139}, {5, 230}, { 6, 76},
//IS       IO       IAM      I        IU        IAME      IAM~      I
 {7, 77}, {8, 78}, {9, 79}, {9,138}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//IAI      IU       IAMS     IAM      IUS       IAIS      IUOSE     IUOS
//25  medine
{{0,103}, {1,104}, {2,105}, {3,106}, { 4, 58}, { 5,107}, { 5,108}, { 6, 58},
//E        ES       EI       E        E         EJE       EJ        E
 {7,104}, {8, 78}, {9,109}, {9,110}, {10,111}, {11,112}, {11,226}, {12,113}, {-1, -1}},
//ES       IU       EMS      EM       ES        EMIS      E~M       ESE
//26  gardus
{{0, 62}, {1,121}, {2,138}, {3, 60}, { 4, 74}, { 5,139}, { 5,230}, {14, 57}, {15, 77}, {16,132}, {17,140},
//US       AUS      IAM      U        IU        IAME      IAM~      b.g.    prvm.
 {7,123}, {8, 78}, {9,136}, {9,137}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//US       IU       IEMS     IEM      IUS       IAIS      IUOSE     IUOS
//27  gardi
{{0, 76}, {1, 96}, {2, 77}, {3, 73}, { 4, 95}, { 5, 97}, { 5, 98},
//I        IOS      IAI      IA       IA        IOJE      IOJ
 {7, 96}, {8, 78}, {9, 99}, {9,100}, {10, 70}, {11,101}, {11,225}, {12,102}, {-1, -1}},
//IOS      IU       IOMS     IOM      IAS       IOMIS     IO~M      IOSE
//28  gerasis
{{0,  0}, {1,  1}, {2,  2}, {3,  3}, { 4,  4}, { 5,  5}, { 5,220},
//ASIS     OJO      AJAM     AJI      UOJU      AJAME     A~JAM
 {7,  6}, {8,  7}, {9,  8}, {9,  9}, {10, 10}, {11, 11}, {12, 12}, {12, 13}, {-1, -1}},
//IEJI     UJU      IESIEMS  IESIEM   UOSIUS    AISIAIS   UOSIUOSE  UOSIUOS
//29  geroji
{{0, 14}, {1, 15}, {2, 16}, {3, 17}, { 4, 18}, { 5, 19}, { 5, 20},
//OJI      OSIOS    AJAI     AJA      AJA       OJOJE     OJOJ
 {7, 15}, {8,  7}, {9, 21}, {9, 22}, {10, 23}, {11, 24}, {11,221}, {12, 25}, {-1, -1}},
//OSIOS    UJU      OSIOMS   OSIOM    ASIAS     OSIOMIS   O~SIOM    OSIOSE
//30  zaliasis
{{0, 26}, {1, 27}, {2, 28}, {3, 29}, { 4, 30}, { 5, 31}, { 5,222},
//IASIS    IOJO     IAJAM    IAJI     IUOJU     IAJAME    IA~JAM
 {7,  6}, {8, 32}, {9,  8}, {9,  9}, {10, 33}, {11, 34}, {12, 35}, {12, 36}, {-1, -1}},
//IEJI     IUJU     IESIEMS  IESIEM   IUOSIUS   IAISIAIS  IUOSIUOSE IUOSIUOS
//31  zalioji
{{0, 37}, {1, 38}, {2, 39}, {3, 40}, { 4, 41}, { 5, 42}, { 5, 43},
//IOJI     IOSIOS   IAJAI    IAJA     IAJA      IOJOJE    IOJOJ
 {7, 38}, {8, 32}, {9, 44}, {9, 45}, {10, 46}, {11, 47}, {11,223}, {12, 48}, {-1, -1}},
//IOSIOS   IUJU     IOSIOMS  IOSIOM   IASIAS    IOSIOMIS  IO~SIOM   IOSIOSE
//32  geresnysis
{{0, 49}, {1, 27}, {2, 28}, {3, 50}, { 4, 30}, { 5, 31}, { 5,222},
//YSIS     IOJO     IAJAM    IJI      IUOJU     IAJAME    IA~JAM
 {7,  6}, {8, 32}, {9,  8}, {9,  9}, {10, 33}, {11, 34}, {12, 35}, {12, 36}, {-1, -1}},
//IEJI     IUJU     IESIEMS  IESIEM   IUOSIUS   IAISIAIS  IUOSIUOSE IUOSIUOS
//33  gardusis
{{0, 51}, {1, 27}, {2, 28}, {3, 52}, { 4, 30}, { 5, 31}, { 5,222},
//USIS     IOJO     IAJAM    UJI      IUOJU     IAJAME    IA~JAM
 {7,  6}, {8, 32}, {9,  8}, {9,  9}, {10, 33}, {11, 34}, {12, 35}, {12, 36}, {-1, -1}},
//IEJI     IUJU     IESIEMS  IESIEM   IUOSIUS   IAISIAIS  IUOSIUOSE IUOSIUOS
//46->34  kujis
{{0, 84}, {1, 54}, {2, 55}, {3, 85}, { 4, 57}, { 5, 68}, { 5, 75}, { 6, 76},
//IS       O        UI       I        U         YJE       Y         I
 {7, 59}, {8, 60}, {9, 61}, {9,134}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//AI       U        AMS      AM       US        AIS       UOSE      UOS
//47->35  zvejys
{{0, 86}, {1, 54}, {2, 55}, {3, 85}, { 4, 57}, { 5, 68}, { 5, 75}, { 6, 75},
//IS       O        UI       I        U         YJE       Y         Y
 {7, 59}, {8, 60}, {9, 61}, {9,134}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//AI       U        AMS      AM       US        AIS       UOSE      UOS
//48->36  skerssije
{{0,103}, {1,104}, {2,105}, {3,106}, { 4, 58}, { 5,107}, { 5,108}, { 6, 58},
//E        ES       EI       E        E         EJE       EJ        E
 {7,104}, {8, 60}, {9,109}, {9,110}, {10,111}, {11,112}, {11,226}, {12,113}, {-1, -1}},
//ES       U        EMS      EM       ES        EMIS      E~M       ESE
//49->37  abuojas
{{0, 53}, {1, 54}, {2,134}, {3, 56}, { 4, 57}, { 5,135}, { 5,229}, {14, 87}, {15, 59}, {16, 69}, {17,140},
//AS       O        AM       A        U         AME       AM~       b.g.      prvm.
 {7, 76}, {8, 60}, {9,136}, {9,137}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//I        U        IEMS     IEM      US        AIS       UOSE      UOS
//50->38  abuoja
{{0, 87}, {1, 88}, {2, 59}, {3, 56}, { 4, 87}, { 5, 89}, { 5, 90},
//A        OS       AI       A        A         OJE       OJ
 {7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS       U        OMS      OM       AS        OMIS      O~M       OSE
//51->39  ilgakojis
{{0, 84}, {1, 54}, {2,134}, {3, 85}, { 4, 57}, {5, 135}, {5, 229}, { 6, 76},
//IS       O        AM       I        U         AME       AM~       I
 {7, 59}, {8, 60}, {9, 61}, {9,134}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//AI       U        AMS      AM       US        AIS       UOSE      UOS
//52->40  ilgakoje
{{0,103}, {1,104}, {2,105}, {3,106}, { 4, 58}, { 5,107}, { 5,108}, { 6, 58},
//E        ES       EI       E        E         EJE       EJ        E
 {7,104}, {8, 60}, {9,109}, {9,110}, {10,111}, {11,112}, {11,226}, {12,113}, {-1, -1}},
//ES       U        EMS      EM       ES        EMIS      E~M       ESE
//53->41  gajus
{{0, 62}, {1,121}, {2,134}, {3, 60}, { 4, 57}, { 5,135}, { 5,229}, {14, 57}, {15, 59}, {16, 69}, {17,140},
//US       AUS      AM       U        U         AME       AM~       b.g.    prvm.
 {7,123}, {8, 60}, {9,136}, {9,137}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//US       U        IEMS     IEM      US        AIS       UOSE      UOS
//54->42  gaji
{{0, 76}, {1, 88}, {2, 59}, {3, 56}, { 4, 87}, { 5, 89}, { 5, 90},
//I        OS       AI       A        A         OJE       OJ
 {7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS       U        OMS      OM       AS        OMIS      O~M       OSE
//59->43  gajusis
{{0, 51}, {1,  1}, {2,  2}, {3, 52}, { 4,  4}, { 5,  5}, { 5,220},
//USIS     OJO      AJAM    UJI       UOJU      AJAME     A~JAM
{7,  6}, {8,  7}, {9,  8}, {9,  9}, {10, 10}, {11, 11}, {12, 12}, {12, 13}, {-1, -1}},
//IEJI     UJU      IESIEMS  IESIEM   UOSIUS    AISIAIS   UOSIUOSE  UOSIUOS

//Kelintiniai skaitvardziai
//44  pirmas (vyriska gymine) ir visi kiti isskyrus trecias
{{0, 53}, {1, 54}, {2,134}, {3, 56}, {4, 57}, {5,135}, {5,229}, {14, 87},
//AS       O        AM       A        U         AME     AM~      b.g    
{7, 76}, {8, 60}, {9,136}, {9,137}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//I        U        IEMS     IEM      US        AIS       UOSE      UOS
//45  pirma (moteriska gimine) ir visi kiti isskyrus trecia
{{0, 87}, {1, 88}, {2, 59}, {3, 56}, { 4, 87}, {5, 89}, {5, 90},
//A        OS       AI       A        A         OJE       OJ
{7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS       U        OMS      OM       AS        OMIS     O~M       OSE
//46 trecias
{{0, 70}, {1, 71}, {2,138}, {3, 73}, {4, 74}, {5,139}, {5,230}, {14, 95},
//IAS      IO       IAM      IA       IU        IAME    IAM~     b.g
{7, 76}, {8, 78}, {9,136}, {9,137}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//I        IU       IEMS     IEM      IUS       IAIS      IUOSE     IUOS
//47 trecia
{{0, 95}, {1, 96}, {2, 77}, {3, 73}, { 4, 95}, { 5, 97}, { 5, 98},
//IA       IOS      IAI      IA       IA        IOJE      IOJ
{7, 96}, {8, 78}, {9, 99}, {9,100}, {10, 70}, {11,101}, {11,225}, {12,102}, {-1, -1}},
//IOS      IU       IOMS     IOM      IAS       IOMIS    IO~M      IOSE

//Kuopiniai skaitvardziai
//48  dvejetas
{{0, 53}, {1, 54}, {2, 55}, {3, 56}, { 4, 57}, { 5, 58}, {-1, -1}},
//AS       O        UI       A        U         E

//Dauginiai skaitvardziai
//49  penkeri (vyriska gimine)
{{7, 76}, {8, 78}, {9,136}, {9,137}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//I        IU       IEMS     IEM      IUS       IAIS      IUOSE     IUOS
//50  penkerios (moteriska gimine)
{{7, 96}, {8, 78}, {9, 99}, {9,100}, {10, 70}, {11,101}, {11,225}, {12,102}, {-1, -1}},
//IOS      IU       IOMS     IOM      IAS       IOMIS     IO~M      IOSE
//51 dveji (vyriska gimine)
{{7, 76}, {8, 60}, {9,136}, {9,137}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//I        U        IEMS     IEM      US        AIS       UOSE      UOS
//{{7, 141}, {8, 142}, {9, 143}, {10, 144}, {11,145}, {12,146}, {12,146}, {-1, -1}},
//I        U         IEMS      US         AIS       UOSE      UOS
//52 dvejos (moteriska gimine)
{{7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS       U        OMS      OM       AS        OMIS      O~M       OSE
//{{7, 147}, {8, 142}, {9, 148}, {10, 149}, {11,150}, {12,151}, {-1, -1}},
//OS        U        OMS       AS         OMIS       OSE

// Kiekiniai pagrindiniai skaitvardziai
//53 vienas (vyriska gimine)
{{0, 53}, {1, 54}, {2,134}, {3, 56}, {4, 57}, {5,135}, {5,229},
//AS       O        AM       A        U       AME       AM~
{7, 76}, {8, 60}, {9,136}, {9,137}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//I        U        IEMS     IEM      US        AIS       UOSE      UOS
//54  viena (moteriska gimine)
{{0, 87}, {1, 88}, {2, 59}, {3, 56}, { 4, 87}, {5, 89}, {5, 90},
//A        OS       AI       A        A         OJE       OJ
{7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS       U        OMS      OM       AS        OMIS     O~M       OSE
//55 du (vyriska gimine)
{{7, 57}, {8, 152}, {9, 153}, {10, 57}, {11, 154}, {12, 155}, {12, 156}, {-1, -1}},
//U       VIEJU       VIEM       U       VIEM       VIEJUOSE   VIEJUOS
//56 dvi (moteriska gimine)
{{7, 151}, {8, 152}, {9, 153}, {10, 151}, {11, 154}, {12, 157},{-1, -1}},
//VI       VIEJU       VIEM       VI      VIEM       VIEJOSE
//57 trys ( vyriska gimine)
{{7, 86}, {8, 158}, {9, 117}, {9, 118}, {10, 84}, {11, 119}, {11, 227}, {12, 159}, {12, 160}, {-1, -1}},
//YS       IJU        IMS       IM        IS        IMIS      IM~        IJUOSE     IJUOS
//58 trys (moteriska gimine)
{{7, 86}, {8, 158}, {9, 117}, {9, 118}, {10, 84}, {11, 119}, {11, 227}, {12, 161}, {-1, -1}},
//YS       IJU        IMS       IM        IS        IMIS      IM~        IJOSE
//59 keturi iki devyni (vyriska gimine)
{{7, 76}, {8, 78}, {9, 136}, {9, 137}, {10, 84}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//I        IU        IEMS      IEM      IS        IAIS      IUOSE     IUOS
//60 keturios iki devynios (moteriska gimine)
{{7, 96}, {8, 78}, {9, 99}, {9,100}, {10, 70}, {11, 101}, {11, 225}, {12, 102}, {-1, -1}},
//IOS      IU        IOMS     IOM     IAS        IOMIS     IO~M       IOSE 
//61 desimtis, dvidesimtis - devyniasdesimtis (moteriska gimine) 
{{0, 84}, {1,114}, {2, 77}, {3, 85}, {4,115}, {4,227}, {5, 68}, {5, 75}, {6,116},
//IS       IES      IAI      I        IMI      IM~      YJE       Y         IE
{7, 86}, {8, 78}, {9,117}, {9,118}, {10, 84}, {11,119}, {11,227}, {12,120}, {-1, -1}},
//YS      IU       IMS      IM       IS        IMIS      IM~       YSE
//62 dvidesimt iki devyniasdesimt
{{-1, -1}},
//
//63 vieuolika iki devyniolika (moteriska gimine)
{{7, 87}, {8, 88}, {9, 59}, {10, 56}, {11, 87}, {12, 89}, {12, 90}, {-1, -1}},
//A        OS       AI       A        A         OJE       OJ
//64 simtas, milijonas, milijardas
{{0, 53}, {1, 54}, {2, 55}, {3, 56}, {4, 57}, {5, 58}, 
//AS       O        UI       A        U         E
{7, 59}, {8, 60}, {9, 61}, {9,134}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//AI       U        AMS      AM       US        AIS       UOSE      UOS
//65 tukstantis
{{0, 84}, {1, 71}, {2, 72}, {3, 85}, {4, 74}, {5, 68}, {5, 75}, 
//IS       IO       IUI      I        IU        YJE       Y
{7, 77}, {8, 78}, {9, 79}, {9,138}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//IAI      IU       IAMS     IAM      IUS       IAIS      IUOSE     IUOS

// Ivardziai
// dviskaita
//66  juodu (jiedu), tuodu, anuodu, situodu, katruodu 
{{7, 162}, {7, 163}, {8, 164}, {9, 165}, {9, 166}, {10, 162}, {10, 163}, {11, 167}, {11, 168}, {-1, -1}},
//UODU      IEDU      UDVIEJU   IEDVIEM   IEMDVIEM  UODU       IEDU       IEDVIEM    IEMDVIEM
//67 tuodu, anuodu, situodu, katruodu vyriskoji gimine
{{-1, -1}},
//
//68 jiedvi, tiedvi, aniedvi, sitiedvi, katriedvi
{{7, 169}, {7, 170}, {7, 171}, {8, 164}, {9, 172}, {9, 173}, {10, 169}, {10, 170}, {10, 171}, {11, 174}, {11, 175}, {-1, -1}},
//IEDVI     UODVI     ODVI      UDVIEJU   ODVIEM    OMDVIEM   IEDVI      UODVI      ODVI       ODVIEM     OMDVIEM
//69 siuodu, kuriuodu vyriskoji gimine//BLOGAI???
{{7, 176}, {7, 163}, {8, 177}, {9, 165}, {9, 166}, {10, 162}, {10, 163}, {11, 167}, {11, 168}, {-1, -1}},
//IUODU     IEDU      IUDVIEJU  IEDVIEM   IEMDVIEM  IUODU      IEDU       IEDVIEM    IEMDVIEM
//70 siedvi, kuriedvi moteriskoji gimine
{{7, 169}, {7, 178}, {7, 179}, {8, 177}, {9, 180}, {9, 181}, {10, 169}, {10, 178}, {10, 179}, {11, 182}, {11, 183}, {-1, -1}},
//IEDVI     IUODVI    IODVI     IUDVIEJU  IODVIEM   IOMDVIEM  IEDVI      IUODVI    IODVI       IODVIEM    OMDVIEM
//71 mudu, judu
{{7, 57}, {8, 152}, {9, 153}, {10, 57}, {11, 154}, {12, 155}, {12, 156}, {-1, -1}},
//U       VIEJU       VIEM       U       VIEM       VIEJUOSE   VIEJUOS
//72 mudvi, judvi
{{7, 151}, {8, 152}, {9, 153}, {10, 151}, {11, 154}, {12, 157},{-1, -1}},
//VI       VIEJU       VIEM       VI      VIEM       VIEJOSE
//73 abu, abudu (vyriskoji gimine)
{{7, 57}, {7, 184}, {8, 185}, {9, 186}, {10, 57}, {10, 184}, {11, 187}, {12, 188}, {12, 189}, {-1, -1}},
//U        UDU       IEJU       IEM      U         UDU        IEM       IEJUOSE     IEJUOS
//74 abi, abidvi (vyriskoji gimine)
{{7, 76}, {7, 190}, {8, 185}, {9, 186}, {10, 76}, {10, 190}, {11, 187}, {12, 191}, {-1, -1}},
//I        IDVI     IEJU       IEM       I        IDVI        IEM       IEJOSE

//75 ji (jos)
{{0, 76}, {1, 88}, {2, 192}, {3, 56}, {4, 87}, {5, 89}, {5, 90}, 
// I       OS       AI        A               A        OJE      OJ
{7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS      U        OMS      OM       AS        OMIS      O~M       OSE
//76 si, kuri (sios, kurios)
{{0, 76}, {1, 96}, {2, 193}, {3, 73}, {4, 95}, {5, 97}, {5, 98}, 
//I       IOS       IAI       IA              IA        IOJE    IOJ
{7, 96}, {8, 78}, {9, 99}, {9, 100}, {10, 70}, {11, 101}, {11, 225}, {12, 102}, {-1, -1}},
//IOS      IU       IOMS    IOM       IAS       IOMIS      IO~M       IOSE
//77 pati (pacios)
{{0, 76}, {1, 96}, {2, 193}, {3, 73}, {4, 95}, {5, 97}, {5, 98},
//I       IOS       IAI      IA               IA        IOJE    IOJ
{7, 96}, {8, 78}, {9, 99}, {9, 100}, {10, 70}, {11, 101}, {11, 225}, {12, 102}, {-1, -1}},
//IOS      IU       IOMS    IOM       IAS      IOMIS       IO~M       IOSE

//78 tokia,siokia,anokia,kokia,jokia,visokia,vienokia,kitokia,sitokia,kazkokia
{{0, 95}, {1, 96}, {2, 77}, {3, 73}, {4, 95}, {5, 97}, {5, 98},
//IA       IOS      IAI      IA       IA       IOJE     IOJ
{7, 96}, {8, 78}, {9, 99}, {9, 100}, {10, 70}, {11, 101}, {11, 225}, {12, 102}, {-1, -1}},
//IOS      IU       IOMS    IOM       IAS      IOMIS       IO~M       IOSE
//79 kita,visa,viena,kiekviena,tula,mana,tava,sava
{{0, 87}, {1, 88}, {2, 192}, {3, 56}, {4, 87}, {5, 89}, {5, 90}, 
//A        OS       AI        A               A        OJE      OJ
{7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS      U        OMS      OM       AS        OMIS      O~M       OSE
//80 jis (jie)
{{0, 84}, {1, 54}, {2, 134}, {3, 85}, {4, 194}, {5, 135}, {5, 229},
//IS       O        AM        I        UO        AME       AM~
{7, 116}, {8, 60}, {9, 136}, {9, 137}, {10, 65}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//IE       U        IEMS      IEM       UOS      AIS       UOSE       UOS
//81 sis,kuris,kazkuris
{{0, 84}, {1, 71}, {2, 138}, {3, 85}, {4, 195}, {5, 139}, {5, 230}, 
//IS       IO       IAM      I        IUO        IAME      IAM~
{7, 116}, {8, 78}, {9, 136}, {9, 137}, {10, 83}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//IE       IU       IEMS      IEM       IUOS      IAIS       IUOSE    IUO~S

//82 toks, sioks, sitoks, anoks, koks, joks, visoks, vienoks, kitoks, kazkoks
{{0, 133}, {1, 71}, {2, 138}, {3, 85}, {4, 74}, {5, 139}, {5, 230}, 
// S        IO       IAM      I         IU       IAME       IAM~
{7, 116}, {8, 78}, {9, 136}, {9, 137}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//IE      IU       IEMS       IEM       IUS              IAIS       IUOSE    IUOS
//83 kitas, visas, vienas, kiekvienas, tulas
{{0, 53}, {1, 54}, {2, 134}, {3, 56}, {4, 57}, {5, 135}, {5, 229}, {14, 87},
//AS       O        AM        A        U        AME       AM~        b.g.
{7, 76}, {8, 60}, {9, 136}, {9, 137}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//I       U        IEMS      IEM       US        AIS       UOSE      UOS
//84 tas, sitas, anas, katras
{{0, 53}, {1, 54}, {2, 134}, {3, 56}, {4, 194}, {5, 135}, {5, 229}, 
//AS       O        AM        A               UO        AME       AM~
{7, 116}, {8, 60}, {9, 136}, {9, 137}, {10, 65}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//IE       U        IEMS      IEM       UOS       AIS       UOSE      UO~S

//85 as
{{1, 196}, {1, 197}, {2, 198}, {3, 199}, {4, 200}, {4, 218}, {5, 201}, {5, 202}, 
// ANES     ANO        AN       ANE       ANIMI     ANIM      ANYJE    ANY
{7, 210}, {8, 211}, {9, 124}, {9, 125}, {10, 62}, {11, 126}, {11, 228}, {12, 212}, {-1, -1}},
//ES       USU       UMS       UM        US        UMIS       UM~        UMYSE
//86 tu
{{0, 57}, {1, 203}, {1, 204}, {2, 205}, {3, 206}, {4, 207}, {4, 219}, {5, 208}, {5, 209}, {-1, -1}},
//U       AVES       AVO       AU        AVE       AVIMI     AVIM      AVYJE      AVY
//87 jus
{{7, 123}, {8, 211}, {9, 124}, {9, 125}, {10, 62}, {11, 126}, {11, 228}, {12, 212}, {-1, -1}},
//US        USU       UMS       UM        US        UMIS       UM~        UMYSE
//88 - (saves, savo...)
{{1, 203}, {1, 204}, {2, 205}, {3, 206}, {4, 207}, {4, 219}, {5, 208}, {5, 209}, {-1, -1}},
// AVES       AVO      AU        AVE       AVIMI     AVIM     AVYJE      AVY

//89  pirmasis
{{0,  0}, {1,  1}, {2,  2}, {3,  3}, { 4,  4}, { 5,  5}, { 5,220},
//ASIS     OJO      AJAM     AJI      UOJU      AJAME     A~JAM
 {7,  6}, {8,  7}, {9,  8}, {9,  9}, {10, 10}, {11, 11}, {12, 12}, {12, 13}, {-1, -1}},
//IEJI     UJU      IESIEMS  IESIEM   UOSIUS    AISIAIS   UOSIUOSE  UOSIUOS
//90  pirmoji
{{0, 14}, {1, 15}, {2, 16}, {3, 17}, { 4, 18}, { 5, 19}, { 5, 20},
//OJI      OSIOS    AJAI     AJA      AJA       OJOJE     OJOJ
 {7, 15}, {8,  7}, {9, 21}, {9, 22}, {10, 23}, {11, 24}, {11,221}, {12, 25}, {-1, -1}},
//OSIOS    UJU      OSIOMS   OSIOM    ASIAS     OSIOMIS   O~SIOM    OSIOSE
//91  treciasis
{{0, 26}, {1, 27}, {2, 28}, {3, 29}, { 4, 30}, { 5, 31}, { 5,222},
//IASIS    IOJO     IAJAM    IAJI     IUOJU     IAJAME    IA~JAM
 {7,  6}, {8, 32}, {9,  8}, {9,  9}, {10, 33}, {11, 34}, {12, 35}, {12, 36}, {-1, -1}},
//IEJI     IUJU     IESIEMS  IESIEM   IUOSIUS   IAISIAIS  IUOSIUOSE IUOSIUOS
//92  trecioji
{{0, 37}, {1, 38}, {2, 39}, {3, 40}, { 4, 41}, { 5, 42}, { 5, 43},
//IOJI     IOSIOS   IAJAI    IAJA     IAJA      IOJOJE    IOJOJ
 {7, 38}, {8, 32}, {9, 44}, {9, 45}, {10, 46}, {11, 47}, {11,223}, {12, 48}, {-1, -1}},
//IOSIOS   IUJU     IOSIOMS  IOSIOM   IASIAS    IOSIOMIS  IO~SIOM   IOSIOSE

//93  pats
{{0, 213}, {1,114}, {2, 138}, {3, 85}, { 4, 74}, { 5,139}, { 5,230},
//  S       IES       IAM      I         IU        IAME     IAM~
 {7, 86}, {8, 78},{9,136}, {9,137}, {10, 80}, {11, 81}, {12, 82}, {12, 83}, {-1, -1}},
//YS       IU       IEMS     IEM      IUS       IAIS      IUOSE     IUOS

//94 manas, tavas, savas
{{0, 53}, {1, 54}, {2, 134}, {3, 56}, {4, 57}, {5, 135}, {5, 229},
//AS       O        AM        A        U        AME       AM~
{7, 76}, {8, 60}, {9, 136}, {9, 137}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//I       U        IEMS      IEM       US        AIS       UOSE      UOS
//95 kas,kazkas 
{{0, 53}, {1, 54}, {1, 217}, {2, 134}, {3, 56}, {4, 194}, {5, 135}, {-1, -1}}, 
//AS       O         IENO      AM        A         UO        AME      AM~

//96 jisai
{{0,215}, {1,  1}, {2,  2}, {3, 50}, { 4,  4}, { 5,  5}, { 5,220},
//ISAI     OJO      AJAM    IJI       UOJU      AJAME     A~JAM
{7,  6}, {8,  7}, {9,  8}, {9,  9}, {10, 10}, {11, 11}, {12, 12}, {12, 13}, {-1, -1}},
//IEJI     UJU      IESIEMS  IESIEM   UOSIUS    AISIAIS   UOSIUOSE  UOSIUOS
//97 joji
{{0, 14}, {1, 15}, {2, 16}, {3, 17}, { 4, 18}, { 5, 19}, { 5, 20},
//OJI      OSIOS    AJAI     AJA      AJA       OJOJE     OJOJ
 {7, 15}, {8,  7}, {9, 21}, {9, 22}, {10, 23}, {11, 24}, {11,221}, {12, 25}, {-1, -1}},
//OSIOS    UJU      OSIOMS   OSIOM    ASIAS     OSIOMIS   O~SIOM    OSIOSE
//98 sisai,kurisai
{{0,215}, {1, 27}, {2, 28}, {3, 50}, { 4, 30}, { 5, 31}, { 5,222},
//ISAI     IOJO     IAJAM    IJI      IUOJU     IAJAME    IA~JAM
 {7,  6}, {8, 32}, {9,  8}, {9,  9}, {10, 33}, {11, 34}, {12, 35}, {12, 36}, {-1, -1}},
//IEJI     IUJU     IESIEMS  IESIEM   IUOSIUS   IAISIAIS  IUOSIUOSE IUOSIUOS
//99 sioji,kurioji
{{0, 37}, {1, 38}, {2, 39}, {3, 40}, { 4, 41}, { 5, 42}, { 5, 43},
//IOJI     IOSIOS   IAJAI    IAJA     IAJA      IOJOJE    IOJOJ
 {7, 38}, {8, 32}, {9, 44}, {9, 45}, {10, 46}, {11, 47}, {11,223}, {12, 48}, {-1, -1}},
//IOSIOS   IUJU     IOSIOMS  IOSIOM   IASIAS    IOSIOMIS  IO~SIOM   IOSIOSE
//100 tasai,sitasai,anasai,katrasai
{{0,214}, {1,  1}, {2,  2}, {3,  3}, { 4,  4}, { 5,  5}, { 5,220},
//ASAI     OJO      AJAM     AJI      UOJU      AJAME     A~JAM
 {7,  6}, {8,  7}, {9,  8}, {9,  9}, {10, 10}, {11, 11}, {12, 12}, {12, 13}, {-1, -1}},
//IEJI     UJU      IESIEMS  IESIEM   UOSIUS    AISIAIS   UOSIUOSE  UOSIUOS
//101 toji,sitoji,anoji,katroji //gal sutampa su joji
{{0, 14}, {1, 15}, {2, 16}, {3, 17}, { 4, 18}, { 5, 19}, { 5, 20},
//OJI      OSIOS    AJAI     AJA      AJA       OJOJE     OJOJ
 {7, 15}, {8,  7}, {9, 21}, {9, 22}, {10, 23}, {11, 24}, {11,221}, {12, 25}, {-1, -1}},
//OSIOS    UJU      OSIOMS   OSIOM    ASIAS     OSIOMIS   O~SIOM    OSIOSE
//102 manasis,tavasis,savasis
{{0,  0}, {1,  1}, {2,  2}, {3,  3}, { 4,  4}, { 5,  5}, { 5,220},
//ASIS     OJO      AJAM     AJI      UOJU      AJAME     A~JAM
 {7,  6}, {8,  7}, {9,  8}, {9,  9}, {10, 10}, {11, 11}, {12, 12}, {12, 13}, {-1, -1}},
//IEJI     UJU      IESIEMS  IESIEM   UOSIUS    AISIAIS   UOSIUOSE  UOSIUOS
//103 manoji,tavoji,savoji
{{0, 14}, {1, 15}, {2, 16}, {3, 17}, { 4, 18}, { 5, 19}, { 5, 20},
//OJI      OSIOS    AJAI     AJA      AJA       OJOJE     OJOJ
 {7, 15}, {8,  7}, {9, 21}, {9, 22}, {10, 23}, {11, 24}, {11,221}, {12, 25}, {-1, -1}},
//OSIOS    UJU      OSIOMS   OSIOM    ASIAS     OSIOMIS   O~SIOM    OSIOSE
//104 ta,sita,ana,katra
{{0, 87}, {1, 88}, {2, 192}, {3, 56}, {4, 87}, {5, 89}, {5, 90},
//A        OS       AI        A         A        OJE      OJ
{7, 88}, {8, 60}, {9, 91}, {9, 92}, {10, 53}, {11, 93}, {11,224}, {12, 94}, {-1, -1}},
//OS      U        OMS      OM       AS        OMIS      O~M       OSE
//105 patsai,toksai - kazkoksai
{{0, 216}, {-1, -1}},
//AI      
//106 kasimas
{{0, 53}, {1, 54}, {2, 55}, {3, 56}, { 4, 57}, { 5, 58}, { 6, 58},
//AS       O        UI       A        U         E         E
 {7, 59}, {8, 60}, {9, 61}, {9,134}, {10, 62}, {11, 63}, {12, 64}, {12, 65}, {-1, -1}},
//AI       U        AMS      AM       US        AIS       UOSE      UOS
//107 kasimasis
{{0, 0}, {1, 141},{2,142}, {3,143}, {4,144}, {5,145}, {6,145},
//ASIS      ISO      UISI	  ASI      USI	  ESI 	
 {7,146}, {8,147}, {-1,-1}},
//AISI    MUSI
};
//-------------------------------------------------------------------
//Laikom, kad pozymiai skiem ir tarpt gali buti nurodyti tik pilnuose kamienuose,
//kamienuose su * (taisyklese) sie pozymiai turetu buti ==0.
//*4 tipo taisyklese taip pat galima nurodyti tarpt (dideles reiksmes, pvz., 63).
//*4 tipo taisyklese taip pat galima nurodyti pozymi skiem su minuso zenklu,
//tada ribos skaiciuojamos ne nuo pradzios, o nuo pabaigos
int ApribotiTarptaut(char *ez, int kiek, int Tarpt)
{
int i, os=1;
for(i=0; i<kiek; i++) if(ez[i]=='O') os*=2;
return (Tarpt & (os-1));
}
//----------------------------------------------------------------------------------------
void setSkPb(char* c)
	{
	*c=*c|2;
	*c=*c&254;
	}
//---------------------------------------------------------------------------------------
void Vdiapazon(char *s, int *mini, int *maxi)
	{
	int omini, omaxi, minit, vidi;

	*mini=0;
	*maxi=VKamSk-1;
	do
		{
		omini=*mini;
		omaxi=*maxi;
		vidi=(omini+omaxi)/2;
		if((unsigned)VKam[vidi].KamPr[0]>=(unsigned)s[0]) *maxi=vidi;
		else if((unsigned)VKam[vidi].KamPr[0]<(unsigned)s[0]) *mini=vidi;
		else
			{
			if((unsigned)VKam[(omini+vidi)/2].KamPr[0]<(unsigned)s[0]) *mini=(omini+vidi)/2;
			if((unsigned)VKam[(omaxi+vidi)/2].KamPr[0]>=(unsigned)s[0]) *maxi=(omaxi+vidi)/2;
			}
		}
	while((omini+2<*mini)||(*maxi+2<omaxi));
	minit=*mini;
	*maxi=VKamSk-1;
	do
		{
		omini=*mini;
		omaxi=*maxi;
		vidi=(omini+omaxi)/2;
		if(strcmp(VKam[vidi].KamPr, s)>0) *maxi=vidi;
		else if(strcmp(VKam[vidi].KamPr, s)<0) *mini=vidi;
		else
			{
			if(strcmp(VKam[(omini+vidi)/2].KamPr, s)<0) *mini=(omini+vidi)/2;
			if(strcmp(VKam[(omaxi+vidi)/2].KamPr, s)>0) *maxi=(omaxi+vidi)/2;
			}
		}
	while((omini+2<*mini)||(*maxi+2<omaxi));
	*mini=minit;
	}
//----------------------------------------------------------------------------------------
void DBdiapazon(char *s, int *mini, int *maxi)
	{
	int omini, omaxi, vidi;

	*mini=0;
	*maxi=DBKamSk-1;
	do
		{
		omini=*mini;
		omaxi=*maxi;
		vidi=(omini+omaxi)/2;
		if(strcmp(DBKam[vidi].Kamienas, s)>0) *maxi=vidi;
		else if(strcmp(DBKam[vidi].Kamienas, s)<0) *mini=vidi;
		else
			{
			if(strcmp(DBKam[(omini+vidi)/2].Kamienas, s)<0) *mini=(omini+vidi)/2;
			if(strcmp(DBKam[(omaxi+vidi)/2].Kamienas, s)>0) *maxi=(omaxi+vidi)/2;
			}
		}
	while((omini+2<*mini)||(*maxi+2<omaxi));
	}
//----------------------------------------------------------------------------------------
int PriorDB[DBIrSk], PriorV[VIrSk], PriorN[NZodSk];

int KamTipai[10][32] = {
{16, 18, 20, 22, 26, 37, 41, 44, 46, -1}, // 0 laipsn.budvardis
{16, 18, 20, 22, 26, 44, 46, -1},         // 1 laipsn.budvardis, gale ne J
{37, 41, -1},                     // 2 laipsn.budvardis, gale J
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 34, 35, 36, -1}, // 3 daiktavardis
{0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 34, 35, -1}, // 4 vyr.gim. daiktavardis
{5, 6, 7, 8, 9, 15, 36, -1},      // 5 mot.gim. daiktavardis
{16, 18, 20, 22, 24, 26, 37, 39, 41, -1}, // 6 budvardis
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
16, 18, 20, 22, 24, 26, 34, 35, 36, 37, 39, 41, 44, 46, -1}}; // 7 bet kas
//------------------------------------------------------------------------------
int Aprib(const char *z, char *Zod, int PI, int KV, int *KircS, int *Priegaid, int *PriesIlgis, int *Skiemen, int *Tarptaut) 
{
int i,j,k,l,n,j1, zz, YraPriesd, km, ap, mm, mini, maxi;
char Zod1[ZODIL1], *s1;
int AtmPries;
strcpy(Zod1,Zod);
if((*(Zod-1)=='I')&&(strchr("AOUÛØ",*(Zod-2))))
	if(*Zod=='È') Zod1[0]='T';
	else if((*Zod=='Þ')&&(*(Zod+1)=='D')) strcpy(Zod1,&Zod1[1]);

switch(z[0])
{
case '0':
	mm=0;

	DBdiapazon(Zod1, &mini, &maxi);
	if(z[4]=='1') {mini=0; maxi=DBKamSk-1;} //zodziams tipo amfibija - amfibiskas atliekam pilna paieska
	i=mini;
	while(i<DBIrSk)
	{
	   j=0;
	   while((DBKam[i].Kamienas[j]==Zod1[j])&&(DBKam[i].Kamienas[j]!=0)) j++;

	   j1=0;    // atmetamos priesagos 'ik' ir 'ij'
	   if((z[4]=='1')&&((DBKam[i].Kamienas[0]=='K')||(DBKam[i].Kamienas[0]=='J'))
		   &&(DBKam[i].Kamienas[1]=='I')&&(DBKam[i].KircSkiem>1))
	   while((DBKam[i].Kamienas[j1+2]==Zod1[j1])&&(DBKam[i].Kamienas[j1+2]!=0)) j1++;

	   ap=0;
	   if((DBKam[i].Kamienas[j]==0)&&(Zod1[j]==0)
		   ||(DBKam[i].Kamienas[j]=='*')
		   &&(mm<=PriorDB[i])&&(ap=Aprib(&DBKam[i].Kamienas[j+1],&Zod1[j],j,DBKam[i].Priegaide,KircS,Priegaid,PriesIlgis,Skiemen,Tarptaut))
		   ||(DBKam[i].Kamienas[j1+2]==0)&&(Zod1[j1]==0))
	   {
//		   kk=0;
		   if(mm<PriorDB[i]) mm=PriorDB[i];
		   l=0; zz=z[1]-'0';                  // kamieno tipo paieska
		   while((KamTipai[zz][l]!=-1)&&(DBKam[i].KamTip!=KamTipai[zz][l])) l++;
		   if(DBKam[i].KamTip==KamTipai[zz][l])

		   if((z[2]=='0')||(z[2]=='1')&&((DBKam[i].Kirciuote==1)||(DBKam[i].Kirciuote==2))
			   ||(z[2]=='2')&&((DBKam[i].Kirciuote==3)||(DBKam[i].Kirciuote==4)))
		   {
			   if(z[3]!='0')
			   {
			   k=0;
               while((Zod1[k]!=0)&&(!strchr("AÀEÆËIYÁOUÛØ",Zod1[k]))) k++;
               while((Zod1[k]!=0)&&(strchr("AÀEÆËIYÁOUÛØ",Zod1[k]))) k++;
               while((Zod1[k]!=0)&&(!strchr("AÀEÆËIYÁOUÛØ",Zod1[k]))) k++;
			   }
               if((z[3]=='0')||(z[3]=='1')&&(Zod1[k]==0)||(z[3]=='2')&&(Zod1[k]!=0))


			{
			if(*Skiemen==-1)
			   {
			   *Skiemen=DBKam[i].skiem;
			   *Tarptaut=DBKam[i].tarpt;
			   }

		   if(KV!=-1)
		   {
			   *PriesIlgis=0; return 1;
		   }
		   else	//if(KV==-1)
		   {
			 if(mm<=PriorDB[i])
			 {
			   if(*PriesIlgis==0)
				   {
				   AtmPries=0;
		           *KircS=DBKam[i].KircSkiem;
				   if((DBKam[i].Kamienas[j1+2]==0)&&(Zod1[j1]==0))  AtmPries=1;
				   *KircS-=AtmPries;
		           *Priegaid=DBKam[i].Priegaide;
				   }
				*PriesIlgis+=PI;
				return 1;
			 }
		   }
			   }
		   }
	   }
   if(i==maxi) i=DBKamSk; else i++;
   }
   break;
//-----------------------------------------------------------------------------------------

case '1': case '2': case '3':
	km=z[0]-'0'-1;      // veiksmazodzio kamieno tipo nustatymas
	strcpy(Zod1,Zod);
	strrev1(Zod1);
	char ww[50];
	int priesd_riba;
	if(z[1]=='1') priesd_riba=1; else priesd_riba=VPriesdSk;

	for(k=0; k<priesd_riba; k++)
	{
	YraPriesd=0;
	j=0;
	if(k>0)
		{
		while((Zod1[j]==PriesdGrup[k].Pavadinimas[j])&&(Zod1[j]!=0)) j++;
		if((PriesdGrup[k].Pavadinimas[j]==0)&&(Zod1[j]!=0)) YraPriesd=1;
		}

	if((k==0)||(YraPriesd))
	{
	Vdiapazon(&Zod1[j], &mini, &maxi);
	i=mini;
	while(i<VIrSk)
	{
	strcpy(ww, VKam[i].KamPr);
	strcat(ww, VKam[i].KamKvP[km].KamPb);
	if(strcmp(&Zod1[j], ww)==0)
	{
	   if((z[1]=='0')&&(YraPriesd==1)
		   ||(z[1]=='1')&&(YraPriesd==0)
		   ||(z[1]=='2'))
	   
	   if((z[2]=='0')
			||(km==0)&&((z[2]=='1')&&(VKam[i].EsLDS==0)||(z[2]=='2')&&(VKam[i].EsLDS==1))
			||(km==1)&&((z[2]=='1')&&((VKam[i].BDS==0)||(VKam[i].Asmenuote&64))
					||(z[2]=='2')&&(VKam[i].BDS==1))
			||(km==2)&&((z[2]=='1')&&(VKam[i].BDS==0)||(z[2]=='2')&&(VKam[i].BDS==1)))

		   if((z[3]=='0')||(z[3]=='1')&&(VKam[i].Asmenuote&63)
			   ||(z[3]=='2')&&(VKam[i].Asmenuote&64))

		{
		if(*Skiemen==-1)
		   {
		   *Skiemen=VKam[i].skiem;
		   *Tarptaut=VKam[i].tarpt;
		   }

		YraPriesd=(YraPriesd==1)&&(strstr(PriesdGrup[k].Pavadinimas,"PER")); //ar priesdelyje yra per

		if((KV==-1)||(YraPriesd))
			{
				if(*PriesIlgis==0)
					if(YraPriesd)
						{
						s1=strstr(Zod1,"PER")+3;
						n=1;
						while(*s1!=0)
							{
							while((*s1!=0)&&(!strchr("AÀEÆËIYÁOUÛØ",*s1))) s1++;
							while((*s1!=0)&&(strchr("AÀEÆËIYÁOUÛØ",*s1))) s1++;
							while((*s1!=0)&&(!strchr("AÀEÆËIYÁOUÛØ",*s1))) s1++;
							n++;
							}
						*KircS=n;
						*Priegaid=1;
						}
					else
						{
						*KircS=VKam[i].KamKvP[km].KircSkiem;
						*Priegaid=VKam[i].KamKvP[km].Prieg;
						}
				*PriesIlgis+=PI;
				return 1;
			}
		else //if(KV!=-1)
			{
			*PriesIlgis=0;
			return 1;
			}
		}
	}
	if(i==maxi) i=VKamSk; else i++;
	}//while
	}//if
	}//for
   break;
case '4': if(Zod[0]!=0) return 1; else return 0;
}
return 0;
}

//---------------------------------------------------------------------------------------
void initKircLUSS()
{
int i;
const char *enuor;
if(PriorN[0] != 40) //Kvieciam tik viena karta
	{
	for(i=0; i<DBIrSk; i++)
		{
		enuor=strchr(DBKam[i].Kamienas, '*');
		if(enuor==0) PriorDB[i]=30;
		else if(*(enuor+1)!='4') PriorDB[i]=20+enuor-&DBKam[i].Kamienas[0];
		else PriorDB[i]=enuor-&DBKam[i].Kamienas[0];
		}
	for(i=0; i<VIrSk; i++) PriorV[i]=30;
	for(i=0; i<NZodSk; i++) PriorN[i]=40;
	}
}

//---------------------------------------------------------------------------------------
int Kirciuoti(char *Zodis, char *SkPb, variantas *Variant)
{
char AtvZod[ZODIL1];
char ZodK[ZODIL1];
int ilg, i, j, k, l, m, kg, kn;
int kpg, kpgn, varsk=0, rs, mini, maxi;

int KircS, Priegaid, PriesIlgis, Skiemen, Tarptaut;

ilg=strlen(Zodis);
strcpy(AtvZod, Zodis); strrev1(AtvZod);

//-------Veiksmazodziu kirciavimas---------------------------------------------------------
struct KamGalunV{char Kam[ZODIL1]; int GalNr; char Asimil;} KamGalV[VKGIL1];
struct PriesdKamGalun{int PrNr; char Kam[ZODIL1]; int GalNr; char Asimil;} PrKamGal[VPKGIL1];
struct PriesdKamGalunNr{int PrNr; int KamNr; int GalNr; char Asimil;} PKGNr[VPKGNIL1];

kg=0;
for(k=0; k<1065; k++)
{
j=0;
while((AtvZod[j]==GalMasV[k].Galune[j])&&(AtvZod[j]!=0)) j++;
if((GalMasV[k].Galune[j]==0)&&((!strchr("AEIU",AtvZod[j]))
   ||(!strchr("ÀEYUIOÁAØËÛÆ",GalMasV[k].Galune[j-1])))&&(AtvZod[j]!=0))
   {
   strncpy(KamGalV[kg].Kam, Zodis, ilg-j); KamGalV[kg].Kam[ilg-j]=0;
   KamGalV[kg].GalNr=k;
   KamGalV[kg].Asimil=0;
   if(kg<VKGIL1-2) kg++;

   if((Zodis[ilg-j]=='I')&&(strchr("AÀOUÛØ",Zodis[ilg-j+1]))) //ar minksta galune
     {
     if(KamGalV[kg-1].Kam[ilg-j-1]=='È')
       {
       KamGalV[kg-1].Kam[ilg-j-1]='T';
       }
     else
       if((KamGalV[kg-1].Kam[ilg-j-1]=='Þ')&&(KamGalV[kg-1].Kam[ilg-j-2]=='D'))
       {
       KamGalV[kg-1].Kam[ilg-j-1]=0;
       }
   }

   if(GalMasV[k].Galune[j-1]=='S')                            // asimiliacija prieð S
   {
   KamGalV[kg]=KamGalV[kg-1]; KamGalV[kg].Kam[ilg-j]='S'; KamGalV[kg].Kam[ilg-j+1]=0; if(kg<VKGIL1-2) kg++;
   KamGalV[kg]=KamGalV[kg-1]; KamGalV[kg].Kam[ilg-j]='Z'; if(kg<VKGIL1-2) kg++;

   if(GalMasV[k].Galune[j]==0)                                // bûsimojo l.3 a.prieð S
   if((KamGalV[kg-3].Kam[ilg-j-1]=='I')&&(!strchr("AEUO",KamGalV[kg-3].Kam[ilg-j-2])))
   {
   KamGalV[kg]=KamGalV[kg-3]; KamGalV[kg].Kam[ilg-j-1]='Y'; KamGalV[kg].Asimil=1; if(kg<VKGIL1-2) kg++; 
   }
   else if((KamGalV[kg-3].Kam[ilg-j-1]=='U')&&(!strchr("AEO",KamGalV[kg-3].Kam[ilg-j-2])))
   {
   KamGalV[kg]=KamGalV[kg-3]; KamGalV[kg].Kam[ilg-j-1]='Û'; KamGalV[kg].Asimil=1; if(kg<VKGIL1-2) kg++;
   }

   }
   else
   if(GalMasV[k].Galune[j-1]=='Ð')                            // asimiliacija prieð Ð
   {
   KamGalV[kg-1].Kam[ilg-j]='Ð'; KamGalV[kg-1].Kam[ilg-j+1]=0;
   KamGalV[kg]=KamGalV[kg-1]; KamGalV[kg].Kam[ilg-j]='Þ'; if(kg<VKGIL1-2) kg++;
   }
   else
   if(GalMasV[k].Galune[j-1]=='K')                            // asimiliacija prieð K
   {
   KamGalV[kg]=KamGalV[kg-1]; KamGalV[kg].Kam[ilg-j]='K'; KamGalV[kg].Kam[ilg-j+1]=0; if(kg<VKGIL1-2) kg++;
   KamGalV[kg]=KamGalV[kg-1]; KamGalV[kg].Kam[ilg-j]='G'; if(kg<VKGIL1-2) kg++;
   }
   }
}

kpg=0;
for(l=0; l<kg; l++)
{
if(GalMasV[KamGalV[l].GalNr].Sangrazine==0)
for(k=1; k<VPriesdSk; k++)
if((GalMasV[KamGalV[l].GalNr].PriesdTE==1)||(PriesdGrup[k].Pavadinimas[0]!='T') //blogai TEUZEME, nes PriesdNE==0
   ||(PriesdGrup[k].Pavadinimas[1]!='E')||(PriesdGrup[k].Pavadinimas[2]=='B'))
{
j=0;
while((KamGalV[l].Kam[j]==PriesdGrup[k].Pavadinimas[j])&&(KamGalV[l].Kam[j]!=0)) j++;
if((PriesdGrup[k].Pavadinimas[j]==0)&&(KamGalV[l].Kam[j]!=0))
   {
   PrKamGal[kpg].PrNr=k;
   strcpy(PrKamGal[kpg].Kam, &KamGalV[l].Kam[j]);
   PrKamGal[kpg].GalNr=KamGalV[l].GalNr;
   PrKamGal[kpg].Asimil=KamGalV[l].Asimil;
   if(kpg<VPKGIL1-2) kpg++ ;
   }
   
}
PrKamGal[kpg].PrNr=0;
strcpy(PrKamGal[kpg].Kam, KamGalV[l].Kam);
PrKamGal[kpg].GalNr=KamGalV[l].GalNr;
PrKamGal[kpg].Asimil=KamGalV[l].Asimil;
if(kpg<VPKGIL1-2) kpg++ ;
}

int ilg1;
kpgn=0;
for(k=0; k<kpg; k++)
{
  Vdiapazon(PrKamGal[k].Kam, &mini, &maxi);
  i=mini;
  while(i<VIrSk)
  {
    if((strncmp(VKam[i].KamPr, PrKamGal[k].Kam, ilg1=strlen(VKam[i].KamPr))==0)
	  &&(strcmp(VKam[i].KamKvP[GalMasV[PrKamGal[k].GalNr].KamTipas].KamPb, &PrKamGal[k].Kam[ilg1])==0)
	  &&(VKam[i].Asmenuote & GalMasV[PrKamGal[k].GalNr].Asmenuote)
	  &&((PrKamGal[k].Asimil==0)
	   ||(VKam[i].BDS==0)
	   &&((VKam[i].KamKvP[0].KamPb[0]=='Y')
	   &&(VKam[i].KamKvP[1].KamPb[0]=='I')
	   ||(VKam[i].KamKvP[0].KamPb[0]=='Û')
	   &&(VKam[i].KamKvP[1].KamPb[0]=='U'))))
   {
   PKGNr[kpgn].PrNr=PrKamGal[k].PrNr;
   PKGNr[kpgn].KamNr=i;
   PKGNr[kpgn].GalNr=PrKamGal[k].GalNr;
   PKGNr[kpgn].Asimil=PrKamGal[k].Asimil;
   if(kpgn<VPKGNIL1-2) kpgn++ ;
   }
   if(i==maxi) i=VKamSk; else i++;
  }
}

char KirtViet;
char KirtPoz;
char *et;
const char *ek;  //naudojamas nustatant skiemens ribas priesdeliuose
char KirtisIPriesdeli; //naudojamas veiksmazodziuose turi ir gali
char ww[50];

for(i=0; i<kpgn; i++)
{
KirtPoz=-1;

if((PKGNr[i].PrNr!=0)&&(PriesdGrup[PKGNr[i].PrNr].VisadKirc))
   KirtViet=2;
else
   {
//turi ir gali kirciavimas
	KirtisIPriesdeli=VKam[PKGNr[i].KamNr].KircPriesd;
	if(KirtisIPriesdeli==2)
		{
		if((strcmp(PriesdGrup[PKGNr[i].PrNr].Pavadinimas, "NE")==0) ||
		  (strcmp(PriesdGrup[PKGNr[i].PrNr].Pavadinimas, "NEBE")==0) ||
		  (strcmp(PriesdGrup[PKGNr[i].PrNr].Pavadinimas, "BE")==0) ||
		  (strcmp(PriesdGrup[PKGNr[i].PrNr].Pavadinimas, "TEBE")==0) ||
		  (strcmp(PriesdGrup[PKGNr[i].PrNr].Pavadinimas, "TE")==0) ||
		  (strcmp(PriesdGrup[PKGNr[i].PrNr].Pavadinimas, "TENE")==0) ||
		  (strcmp(PriesdGrup[PKGNr[i].PrNr].Pavadinimas, "TENEBE")==0) ||
		  (strcmp(PriesdGrup[PKGNr[i].PrNr].Pavadinimas, "TEBENE")==0)) KirtisIPriesdeli=0;
		else  KirtisIPriesdeli=1;
		}

	switch(GalMasV[PKGNr[i].GalNr].KircTaisykle)
	{
    case 0:
//1.1 Es.l.vienaskaitos 1 ir 2 asm. ir sangraziniai (kerpu, kerpuosi) 
if((PKGNr[i].PrNr!=0)&&(KirtisIPriesdeli))
   KirtViet=2;          // Kirciuoti priesdeli
else
   if((VKam[PKGNr[i].KamNr].KamKvP[0].KircSkiem==1)
	   &&(VKam[PKGNr[i].KamNr].KamKvP[0].Prieg!=1))       // Priegaide trumpa ar tvirtagale
      KirtViet=0;          // Kirciuoti galune
   else
      KirtViet=1;          // Kirciuoti kamiena
break;

    case 1:
//1.2 Es.l 3 asm. ir daugiskaita (kerpa, kerpame);
//3  Es.l. padalyvis (kerpant,kerpantis (kada));
//4.2 Es.l. veikiamasis dalyvis, isskyrus trump.galunes (kerpantis (koks), kerpanti)
//5.2 Es.l. neveikiamojo dalyvio linksniai, nekirciuojami galuneje (kerpamas)
//6 Es.l. veikiamasis prieveiksmis (kerpanciai (kaip))
if((PKGNr[i].PrNr!=0)&&(KirtisIPriesdeli))
   KirtViet=2;          // Kirciuoti priesdeli
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 2:
//2.1 Liepiamosios nuosakos 3 asm. su galune IE (tekerpie);
if(!VKam[PKGNr[i].KamNr].EsLDS)
   KirtViet=0;          // Kirciuoti galune
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 3:
//2.2 Liepiamosios nuosakos 3 asm. su galune AI (temokai);
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 4:
//4.1 Es.l. veikiamojo dalyvio trump.galunes (kerpàs (koks), kerpà)
if(KirtisIPriesdeli)
   KirtViet=0;          // Kirciuoti galune
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 5:
//5.1 Es.l. neveikiamojo dalyvio linksniai, kirciuojami galuneje (kerpamam)
if((!VKam[PKGNr[i].KamNr].EsLDS)&&(VKam[PKGNr[i].KamNr].Asmenuote & 31))
   KirtViet=0;          // Kirciuoti galune
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 6:
//7 Es.l. neveikiamasis prieveiksmis (kerpamai (kaip))
strcpy(ww, VKam[PKGNr[i].KamNr].KamPr);
strcat(ww, VKam[PKGNr[i].KamNr].KamKvP[0].KamPb);
et=ww+strlen(ww)-4;
if((!VKam[PKGNr[i].KamNr].EsLDS)&&(VKam[PKGNr[i].KamNr].Asmenuote & 31)
   &&((VKam[PKGNr[i].KamNr].KamKvP[0].Prieg==0)
   ||(VKam[PKGNr[i].KamNr].KamKvP[0].Prieg==2)
   &&((et[1]!='I')&&((et[2]=='A')||(et[2]=='E'))
   ||(et[0]!='I')&&((et[1]=='A')||(et[1]=='E'))
   &&(!strchr("IULMNR",et[2])))))                              //kamiene tik A ar tik E
   KirtViet=0;          // Kirciuoti galune
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 7:
//8.1 B.k.l.vienaskaitos 1 ir 2 asm. ir sangraziniai (kirpau, kirpausi) 
if((PKGNr[i].PrNr!=0)&&(VKam[PKGNr[i].KamNr].Asmenuote & 10)
   &&(VKam[PKGNr[i].KamNr].KamKvP[1].Prieg!=1))
   KirtViet=2;          // Kirciuoti priesdeli
else
   if((VKam[PKGNr[i].KamNr].KamKvP[1].KircSkiem==1)
	   &&(VKam[PKGNr[i].KamNr].KamKvP[1].Prieg!=1))       // Priegaide trumpa ar tvirtagale
      KirtViet=0;          // Kirciuoti galune
   else
      KirtViet=1;          // Kirciuoti kamiena
break;

    case 8:
//8.2 B.k.l 3 asm. ir daugiskaita (kirpo, kirpome);
if((PKGNr[i].PrNr!=0)&&(VKam[PKGNr[i].KamNr].Asmenuote & 10)
   &&(VKam[PKGNr[i].KamNr].KamKvP[1].Prieg!=1))
   KirtViet=2;          // Kirciuoti priesdeli
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 9:
//9 B.k.l. padalyvis (kirpus,kirpusis (kada));
//10 B.k.l. veikiamasis dalyvis (kirpæs (koks), kirpusi)
//11 B.k.l. veikiamasis prieveiksmis (kirpusiai (kaip))
KirtViet=1;          // Kirciuoti kamiena
break;

    case 10:
//12 Bendratis (kirpti)
//13 B.d.l. (kirpdavau)
//14.1 Busimasis l. issk. 3 a.(kirpsiu)
//15 Tariamoji nuosaka (kirpèiau)
//16 Liepiamoji nuosaka (kirpk)
//17.2 Pusdalyvio galuneje nekirciuojamos formos (kirpdamas, kirpdamos)
//18 B.d.l. ir busim.l. padalyvis (kirpdavus, kirpsiant)
//19 B.d.l. veikiamasis dalyvis (kirpdavæs)
//20 Busim.l.veikiamasis dalyvis (kirpsiàs)
//22.2 Busim.l.neveikiamojo dalyvio galuneje nekirciuojami linksniai (kirpsimas)
//23.2 Reikiamybes dalyvio galuneje nekirciuojami linksniai (kirptinas)
KirtViet=1;          // Kirciuoti kamiena
break;

    case 11:
//17.1 Pusdalyvio galuneje kirciuojamos formos (kirpdama, kirpdami)
//21.1 Butojo l.neveik.dal. vgv:n,vt vgd:v,k,n,i,vt mgv:v,k,vt mgd:k,n,i,vt
//22.1 Busim.l.neveikiamojo dalyvio galuneje kirciuojami linksniai (kirpsimam)
//23.1 Reikiamybes dalyvio galuneje kirciuojami linksniai (kirptinam)
//24 Budinys (kirpte, kirptinai)
//25 Butojo l. neveikiamasis prieveiksmis (kirptai (kaip))
if(!VKam[PKGNr[i].KamNr].BDS)
   KirtViet=0;          // Kirciuoti galune
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 12:
//21.2 Butojo l.neveik.dal. mgv:n,i
if((!VKam[PKGNr[i].KamNr].BDS)&&(VKam[PKGNr[i].KamNr].KamKvP[2].Prieg!=1))     // Priegaide trumpa ar tvirtagale
   KirtViet=0;          // Kirciuoti galune
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 15:
//21.4 Butojo l.neveik.dal. vgv:i vgd:g mgd:g
if((!VKam[PKGNr[i].KamNr].BDS)&&(VKam[PKGNr[i].KamNr].KamKvP[2].Prieg!=1))     // Priegaide trumpa ar tvirtagale
   {if(PKGNr[i].PrNr!=0) 
       KirtViet=2;          // Kirciuoti priesdeli
    else
       KirtViet=0;          // Kirciuoti galune
   }
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 13:
//21.3 Butojo l.neveik.dal. vgv:v,k,g mgv:g mgd:v
if((!VKam[PKGNr[i].KamNr].BDS)&&(VKam[PKGNr[i].KamNr].KamKvP[2].Prieg!=1))     // Priegaide trumpa ar tvirtagale
   {if(PKGNr[i].PrNr!=0) 
       KirtViet=2;          // Kirciuoti priesdeli
    else
	{
       if((VKam[PKGNr[i].KamNr].KamKvP[2].Prieg==0)
		   &&(strchr(VKam[PKGNr[i].KamNr].KamKvP[2].KamPb, 'A')
		   ||strchr(VKam[PKGNr[i].KamNr].KamKvP[2].KamPb, 'E')
		   ||strchr(VKam[PKGNr[i].KamNr].KamPr, 'A')
		   ||strchr(VKam[PKGNr[i].KamNr].KamPr, 'E')))     //saknyje tik A ar tik E
		   {KirtPoz=2;}
		KirtViet=1;
	}
   }
else
   KirtViet=1;          // Kirciuoti kamiena
break;

    case 14:
//14.1 Busimasis l. issk. 3 a.(kirpsiu)
if(PKGNr[i].Asimil==1) KirtPoz=0;
else if((VKam[PKGNr[i].KamNr].KamKvP[2].KircSkiem==1)
   &&(VKam[PKGNr[i].KamNr].KamKvP[2].Prieg==1))
      KirtPoz=2;
KirtViet=1;             // Kirciuoti kamiena
	}
}

strcpy(ZodK, Zodis);

// skiemens ribos nustatymas ties priesdeliu grupes pabaiga
strncpy(Variant[varsk].Skiem, SkPb, ZODIL1);
if(PKGNr[i].PrNr!=0)
  {
  l=strlen(PriesdGrup[PKGNr[i].PrNr].Pavadinimas);
  if(strchr("IÁUAE", ZodK[l-1])&&strchr("ÀEYUIOÁAØËÛÆ", ZodK[l]))
	  {
	  Variant[varsk].Skiem[l] |= 2;
	  Variant[varsk].Skiem[l] &=254;
	  }
//skiemens ribos nustatymas priesdeliu grupes viduje
  if((ek=strstr(PriesdGrup[PKGNr[i].PrNr].Pavadinimas,"TE"))!=0)
		{
		Variant[varsk].Skiem[ek-PriesdGrup[PKGNr[i].PrNr].Pavadinimas+2] |= 2;
		Variant[varsk].Skiem[ek-PriesdGrup[PKGNr[i].PrNr].Pavadinimas+2] &=254;
		}
  if((ek=strstr(PriesdGrup[PKGNr[i].PrNr].Pavadinimas,"BE"))!=0)
		{
		Variant[varsk].Skiem[ek-PriesdGrup[PKGNr[i].PrNr].Pavadinimas+2] |= 2;
		Variant[varsk].Skiem[ek-PriesdGrup[PKGNr[i].PrNr].Pavadinimas+2] &=254;
		}
  if((ek=strstr(PriesdGrup[PKGNr[i].PrNr].Pavadinimas,"NE"))!=0)
		{
		Variant[varsk].Skiem[ek-PriesdGrup[PKGNr[i].PrNr].Pavadinimas+2] |= 2;
		Variant[varsk].Skiem[ek-PriesdGrup[PKGNr[i].PrNr].Pavadinimas+2] &=254;
		}
  }

//----skiemenu pabaigos
rs=0;
for(l=strlen(PriesdGrup[PKGNr[i].PrNr].Pavadinimas); l<ilg-1-strlen(GalMasV[PKGNr[i].GalNr].Galune); l++)
	if(strchr("AÀEÆËIYÁOUÛØ",ZodK[l]) && strchr("AÀEÆËIYÁOUÛØ",ZodK[l+1]))
		{
		if((1<<rs) & VKam[PKGNr[i].KamNr].skiem)
			{
			Variant[varsk].Skiem[l+1] |= 2;
			Variant[varsk].Skiem[l+1] &=254;
			}
		rs++;
		}


if(KirtViet==0)                            // kirciuoti galune
 {
	 Variant[varsk].KirtRaide=ilg-GalMasV[PKGNr[i].GalNr].KircRaide;
	 Variant[varsk].Priegaide=GalMasV[PKGNr[i].GalNr].Priegaide;
 }
else
if(KirtViet==1)                            // kirciuoti kamiena
 {
  m=GalMasV[PKGNr[i].GalNr].KamTipas;
  if(KirtPoz==-1) KirtPoz=VKam[PKGNr[i].KamNr].KamKvP[m].Prieg;
  l=ilg-strlen(GalMasV[PKGNr[i].GalNr].Galune);

  if(!strchr("AÀEÆËIYÁOUÛØ",ZodK[l])) //jei galune prasideda prieb.
  {l++; if(ZodK[l]==0) l++;}
  
// ismetam skiemenis
  for(k=0; k<VKam[PKGNr[i].KamNr].KamKvP[m].KircSkiem; k++)
  {if(l>0) l--;while((!(Variant[varsk].Skiem[l] & 2))&&(l>0)) l--;}
  
// randam kircio vieta kirciuotame skiemenyje ir kircio zenkla
  if(l>0) l--;
  if(KirtPoz==0)
  {
  while(!strchr("ÀEYUIOÁAØËÛÆ", ZodK[l])&&(l>0)) l--;
  }
  else if(KirtPoz==2)
  {
  while(!strchr("ÀEYUIOÁAØËÛÆLMNR", ZodK[l])&&(l>0)) l--;
	if(strchr("LMNR", ZodK[l])&&(!strchr("AEIU", ZodK[l-1])
		||(strchr("AEOU", ZodK[l-2])||(ZodK[l-1]=='E')&&(ZodK[l-2]=='I'))&&(!(Variant[varsk].Skiem[l-1] & 2)))) if(l>0) l--;
  }
  else
  {
  while(!strchr("ÀEYUIOÁAØËÛÆ", ZodK[l])&&(l>0)) l--;
  if(strchr("UIO", ZodK[l])&&strchr("AEOU", ZodK[l-1])
	  ||(ZodK[l]=='E')&&(ZodK[l-1]=='I')) if(!(Variant[varsk].Skiem[l] & 2)) if(l>0) l--;
  }

  Variant[varsk].KirtRaide=l+1;
  Variant[varsk].Priegaide=KirtPoz;
  }
else                                       // kirciuoti priesdeli
 {
	 Variant[varsk].KirtRaide=PriesdGrup[PKGNr[i].PrNr].KircRaide + 1;
	 Variant[varsk].Priegaide=PriesdGrup[PKGNr[i].PrNr].Priegaide;
 }

  Variant[varsk].Zodynas=0;
  Variant[varsk].GramForma=PKGNr[i].GalNr;
  Variant[varsk].Prioritetas=PriorV[PKGNr[i].KamNr];
  Variant[varsk].Tarpt=ApribotiTarptaut(Zodis, ilg-strlen(GalMasV[PKGNr[i].GalNr].Galune), VKam[PKGNr[i].KamNr].tarpt);
  Variant[varsk].KamNr=PKGNr[i].KamNr;
  
  if(varsk<VARSK1-1) varsk++;
}

//-------Nekaitomu zodziu kirciavimas----------------------------------------------
struct NekZod {int ZodNr; int KircSkiem; int Priegaide;} NZNr[NIL1];

kn=0;
for(i=0; i<NZodSk; i++)
   if(!strcmp(Zodis,NZod[i].Zodis))
     {
	 NZNr[kn].ZodNr=i;
     NZNr[kn].KircSkiem=NZod[i].KircSkiem;
	 NZNr[kn].Priegaide=NZod[i].Priegaide;
	 if(kn<NIL1-2) kn++;
     }

for(i=0; i<kn; i++)
{
 strcpy(ZodK, Zodis);

 strncpy(Variant[varsk].Skiem, SkPb, ZODIL1);
 rs=0;
 for(l=0; l<ilg-1; l++)
	if(strchr("AÀEÆËIYÁOUÛØ",ZodK[l]) && strchr("AÀEÆËIYÁOUÛØ",ZodK[l+1]))
		{
		if((1<<rs) & NZod[NZNr[i].ZodNr].skiem)
			{
			Variant[varsk].Skiem[l+1] |= 2;
			Variant[varsk].Skiem[l+1] &=254;
			}
		rs++;
		}

  l=ilg;//-1;
//  ismetam skiemenis
  for(k=0; k<NZNr[i].KircSkiem; k++)
  {if(l>0) l--;while((!(Variant[varsk].Skiem[l] & 2))&&(l>0)) l--;}
  
// randam kircio vieta kirciuotame skiemenyje ir kircio zenkla
  if(l>0) l--;
  if(NZNr[i].Priegaide==0)
  {
  while(!strchr("ÀEYUIOÁAØËÛÆ", ZodK[l])&&(l>0)) l--;
  }
  else if(NZNr[i].Priegaide==2)
  {
  while(!strchr("ÀEYUIOÁAØËÛÆLMNR", ZodK[l])&&(l>0)) l--;
  if(strchr("LMNR", ZodK[l])&&(!strchr("AEIU", ZodK[l-1])
	||(strchr("AEOU", ZodK[l-2])||(ZodK[l-1]=='E')&&(ZodK[l-2]=='I'))&&(!(Variant[varsk].Skiem[l-1] & 2)))) if(l>0) l--;
  }
  else
  {
  while(!strchr("ÀEYUIOÁAØËÛÆ", ZodK[l])&&(l>0)) l--;
  if(strchr("UIO", ZodK[l])&&strchr("AEOU", ZodK[l-1])
	  ||(ZodK[l]=='E')&&(ZodK[l-1]=='I'))
		if(!(Variant[varsk].Skiem[l] & 2)) if(l>0) l--;
  }

  Variant[varsk].KirtRaide=l+1;
  Variant[varsk].Priegaide=NZNr[i].Priegaide;

  Variant[varsk].Zodynas=1;
  Variant[varsk].GramForma=NZNr[i].ZodNr;
  Variant[varsk].Prioritetas=PriorN[NZNr[i].ZodNr];
  Variant[varsk].Tarpt=NZod[NZNr[i].ZodNr].tarpt;
  Variant[varsk].KamNr=NZNr[i].ZodNr;

  if(varsk<VARSK1-1) varsk++;
}

//-----------Daiktavardziu ir budvardziu kirciavimas-------------------------
struct KamGalun{char Kam[ZODIL1]; int GalNr; char priesdNe;} KamGal[DKGIL1];
struct KamG{int KamNr; int GalNr; char KamTip; int KircS; int Priegaid;
int PriesIlgis; int Prior; int skiem; int tarpt; char priesdNe;} KGNr[DKGNIL1];

kg=0;
for(k=0; k<231; k++)
{
j=0;
while((AtvZod[j]==GalMasDB[k].Galune[j])&&(AtvZod[j]!=0)) j++;
if((GalMasDB[k].Galune[j]==0)&&(!strchr("AEIU",AtvZod[j]))&&(AtvZod[j]!=0))
   {
   strcpy(KamGal[kg].Kam, &AtvZod[j]);
   KamGal[kg].GalNr=k;
   KamGal[kg].priesdNe=0;
   if(kg<DKGIL1-2) kg++;
   
   if((KamGal[kg-1].Kam[0]=='È')&&(GalMasDB[k].ArMinksta==1))
   {
   KamGal[kg]=KamGal[kg-1];
   KamGal[kg].Kam[0]='T';
   KamGal[kg].priesdNe=0;
   if(kg<DKGIL1-2) kg++;
   }
   else
   if((KamGal[kg-1].Kam[0]=='Þ')&&(KamGal[kg-1].Kam[1]=='D')&&(GalMasDB[k].ArMinksta==1))
   {
   KamGal[kg]=KamGal[kg-1];
   strcpy(KamGal[kg].Kam, &KamGal[kg-1].Kam[1]);
   KamGal[kg].priesdNe=0;
   if(kg<DKGIL1-2) kg++;
   }

   	if((Zodis[0]=='N')&&(Zodis[1]=='E'))
		{
	   strcpy(KamGal[kg].Kam, &AtvZod[j]);//panasu i fragmenta pries tai
	   KamGal[kg].Kam[ilg-2-j]=0;
	   KamGal[kg].GalNr=k;
	   KamGal[kg].priesdNe=1;
	   if(kg<DKGIL1-2) kg++;
   
	   if((KamGal[kg-1].Kam[0]=='È')&&(GalMasDB[k].ArMinksta==1))
	   {
	   KamGal[kg]=KamGal[kg-1];
	   KamGal[kg].Kam[0]='T';
	   KamGal[kg].priesdNe=1;
	   if(kg<DKGIL1-2) kg++;
	   }
	   else
	   if((KamGal[kg-1].Kam[0]=='Þ')&&(KamGal[kg-1].Kam[1]=='D')&&(GalMasDB[k].ArMinksta==1))
	   {
	   KamGal[kg]=KamGal[kg-1];
	   strcpy(KamGal[kg].Kam, &KamGal[kg-1].Kam[1]);
	   KamGal[kg].priesdNe=1;
	   if(kg<DKGIL1-2) kg++;
	   }
		}
   }
}

int ap;
kn=0;
for(k=0; k<kg; k++)
{
	DBdiapazon(KamGal[k].Kam, &mini, &maxi);

   i=mini;
   while(i<DBIrSk)
   {
	   j=0;
	   ap=0;
	   PriesIlgis=0;
	   Skiemen=-1; //neapibrezta
	   while((DBKam[i].Kamienas[j]==KamGal[k].Kam[j])&&(DBKam[i].Kamienas[j]!=0)) j++;
	   if( (((DBKam[i].Kamienas[j]==0)&&(KamGal[k].Kam[j]==0)
		   ||((DBKam[i].Kamienas[j]=='*')
		   &&(ap=Aprib(&DBKam[i].Kamienas[j+1], &KamGal[k].Kam[j],j,DBKam[i].Priegaide,&KircS,&Priegaid,&PriesIlgis,&Skiemen,&Tarptaut)))))

		   &&((KamGal[k].priesdNe==0)||(DBKam[i].KamTip==16)||(DBKam[i].KamTip==37)||(DBKam[i].KamTip==18)
		   ||(DBKam[i].KamTip==20)||(DBKam[i].KamTip==22)||(DBKam[i].KamTip==24)||(DBKam[i].KamTip==39)
		   ||(DBKam[i].KamTip==26)||(DBKam[i].KamTip==41)))
	   {
	   KGNr[kn].PriesIlgis=PriesIlgis;
	   if(PriesIlgis==0)
	   {
	   KGNr[kn].KircS=DBKam[i].KircSkiem;
	   KGNr[kn].Priegaid=DBKam[i].Priegaide;
	   }
	   else
	   {
       KGNr[kn].KircS=KircS;
	   KGNr[kn].Priegaid=Priegaid;
	   }

	   if(Skiemen==-1)
		   {
		   KGNr[kn].skiem=DBKam[i].skiem;
		   KGNr[kn].tarpt=DBKam[i].tarpt;
		   }
	   else
		   {
		   KGNr[kn].skiem=Skiemen;
		   KGNr[kn].tarpt=Tarptaut;
		   }
	   if((KamGal[k].priesdNe==1) && (strchr("AÀEÆËIYÁOUÛØ", Zodis[2])))
		   KGNr[kn].skiem=(KGNr[kn].skiem<<1)+1; //pridedam skiem.riba, pvz. ne|ofici|alus
	   KGNr[kn].KamNr=i;
	   KGNr[kn].GalNr=KamGal[k].GalNr;
	   KGNr[kn].priesdNe=KamGal[k].priesdNe; //nes kitaip sun~kiai-nesunkiai~
	   KGNr[kn].KamTip=DBKam[i].KamTip;
	   KGNr[kn].Prior=PriorDB[i];
	   if(kn<DKGNIL1-2) kn++;
	   if(kn<DKGNIL1-5)
		{
	   if(KGNr[kn-1].KamTip==16)
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=17; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=28; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=29; kn++;}
	   if(KGNr[kn-1].KamTip==37) //abuojas
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=38; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=28; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=29; kn++;}
	   if(KGNr[kn-1].KamTip==18)
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=19; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=30; kn++;
           KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=31; kn++;}
	   if(KGNr[kn-1].KamTip==20)
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=21; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=32; kn++;
           KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=31; kn++;}
	   if(KGNr[kn-1].KamTip==22)
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=23; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=32; kn++;
           KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=31; kn++;}
	   if(KGNr[kn-1].KamTip==24)
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=25; kn++;}
	   if(KGNr[kn-1].KamTip==39)  //ilgakojis
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=40; kn++;}
	   if(KGNr[kn-1].KamTip==26)
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=27; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=33; kn++;
           KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=31; kn++;}
	   if(KGNr[kn-1].KamTip==41)   //gajus
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=42; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=43; kn++;
           KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=29; kn++;}

	   if(KGNr[kn-1].KamTip==44)   //pirmas 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=45; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=89; kn++;
           KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=90; kn++;}
	   if(KGNr[kn-1].KamTip==46)   //trecias 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=47; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=91; kn++;
           KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=92; kn++;}
	   if(KGNr[kn-1].KamTip==49)   //ketveri 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=50; kn++;}
	   if(KGNr[kn-1].KamTip==51)   //dveji 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=52; kn++;}
	   if(KGNr[kn-1].KamTip==53)   //vienas 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=54; kn++;}
	   if(KGNr[kn-1].KamTip==55)   //du 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=56; kn++;}
	   if(KGNr[kn-1].KamTip==57)   //trys 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=58; kn++;}
	   if(KGNr[kn-1].KamTip==59)   //keturi-devyni 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=60; kn++;}

	   if(KGNr[kn-1].KamTip==66)   //juodu,tuodu 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=68; kn++;}
	   if(KGNr[kn-1].KamTip==69)   //juodu,tuodu 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=70; kn++;}
	   if(KGNr[kn-1].KamTip==71)   //mudu,judu 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=72; kn++;}
	   if(KGNr[kn-1].KamTip==73)   //abudu 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=74; kn++;}
	   if(KGNr[kn-1].KamTip==80)   //jis 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=75; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=96; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=97; kn++;}
	   if(KGNr[kn-1].KamTip==81)   //sis, kuris 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=76; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=98; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=99; kn++;}
	   if(KGNr[kn-1].KamTip==93)   //pats 
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=77; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=105; kn++;}
	   if(KGNr[kn-1].KamTip==82)   //toks,sioks,sitoks,anoks,koks,joks,visoks,vienoks,kitoks
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=78; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=105; kn++;}
	   if(KGNr[kn-1].KamTip==83)   //kitas,visas,vienas,kiekvienas,tulas
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=79; kn++;}
	   if(KGNr[kn-1].KamTip==84)   //tas,sitas,anas,katras
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=104; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=100; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=101; kn++;}
	   if(KGNr[kn-1].KamTip==94)   //manas,tavas,savas
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=79; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=102; kn++;
	       KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=103; kn++;}
	   if(KGNr[kn-1].KamTip==106)   //kasimas
	      {KGNr[kn]=KGNr[kn-1]; KGNr[kn].KamTip=107; kn++;}
		}
	   }
	   if(i==maxi) i=DBKamSk; else i++;
   }
}

struct KamGL{int KamNr; int GalNr; char KamTip; char Linksnis;
char KirtViet; int KircS; int Priegaid; int PriesIlgis; int Prior;
int skiem; int tarpt; char priesdNe;} KGL[DKGLIL1];
char Kirciuote, KirtRink, Linksnis, kl;
int laik, dgs_vns;
kl=0;
for(i=0; i<kn; i++)
   {
	dgs_vns=0;
	if((KGNr[i].tarpt>=TIK_D)&&(KGNr[i].tarpt<TIK_V))
		{KGNr[i].tarpt-=TIK_D; dgs_vns=1;}		//daugiskaitinis
	else if(KGNr[i].tarpt>=TIK_V)
		{KGNr[i].tarpt-=TIK_V; dgs_vns=2;}		//vienaskaitinis
	
	Kirciuote=DBKam[KGNr[i].KamNr].Kirciuote;
   KirtRink=KamTip_KirtRink[KGNr[i].KamTip][Kirciuote-1];
   j=0;
   while(GalViet[KGNr[i].KamTip][j][1]>-1)
     {
	 if(GalViet[KGNr[i].KamTip][j][1]==KGNr[i].GalNr)
	    {
		Linksnis=(char)GalViet[KGNr[i].KamTip][j][0];

		if((dgs_vns==1) && (Linksnis>=7) && (Linksnis<=12)
		 ||(dgs_vns==2) && (Linksnis>=0) && (Linksnis<=6)
		 ||(dgs_vns==0))
		{

		KGL[kl].KamNr=KGNr[i].KamNr;
		KGL[kl].GalNr=KGNr[i].GalNr;
		KGL[kl].KamTip=KGNr[i].KamTip;
		KGL[kl].Linksnis=Linksnis;

		KGL[kl].KircS=KGNr[i].KircS;
		KGL[kl].Priegaid=KGNr[i].Priegaid;
		KGL[kl].PriesIlgis=KGNr[i].PriesIlgis;
		KGL[kl].Prior=KGNr[i].Prior; 
		KGL[kl].skiem=KGNr[i].skiem;
		KGL[kl].tarpt=KGNr[i].tarpt;

		KGL[kl].priesdNe=KGNr[i].priesdNe; //nes kitaip sun~kiai-nesunkiai~

		KGL[kl].KirtViet=KirciuRinkiniai[KirtRink][Linksnis];

		if(kl<DKGLIL1-2) kl++;
		}
	    }
	 j++;
     }
   }

for(i=0; i<kl; i++)
	{
	strcpy(ZodK, Zodis);

// skiemenu ribu papildymas
	strncpy(Variant[varsk].Skiem, SkPb, ZODIL1);
	rs=0;

	if(KGL[i].skiem>0)//galima butu visada skiem ribas ziureti nuo galo
	{
	for(l=0; l<ilg-1-strlen(GalMasDB[KGL[i].GalNr].Galune); l++)
		if(strchr("AÀEÆËIYÁOUÛØ",ZodK[l]) && strchr("AÀEÆËIYÁOUÛØ",ZodK[l+1]))
			{
			if((1<<rs) & KGL[i].skiem) setSkPb(&Variant[varsk].Skiem[l+1]);
			rs++;
			}
	}
	else if(KGL[i].skiem<0)
	{
	KGL[i].skiem=-KGL[i].skiem;
	for(l=ilg-2-strlen(GalMasDB[KGL[i].GalNr].Galune); l>=0; l--)
		if(strchr("AÀEÆËIYÁOUÛØ",ZodK[l]) && strchr("AÀEÆËIYÁOUÛØ",ZodK[l+1]))
			{
			if((1<<rs) & KGL[i].skiem) setSkPb(&Variant[varsk].Skiem[l+1]);
			rs++;
			}
	}


// prieveiksmiu kirciavimas
	if(KGL[i].KirtViet==2)
		{
		if(DBKam[KGL[i].KamNr].Kirciuote==1)
			KGL[i].KirtViet=1;
		else
			{
			l=ilg-3;

// ismetam galunes skiemens raides
			while((!(SkPb[l] & 2))&&(l>0)) l--;
			if(l>0) l--;

// ismetam kitus skiemenis
		    if((ZodK[l]=='Z')&&(ZodK[l-1]=='D')
			 ||(ZodK[l]=='Þ')&&(ZodK[l-1]=='D')
			 ||(ZodK[l]=='H')&&(ZodK[l-1]=='C')) if(l>1) l-=2;
		    else if(strchr("BDGKPTCÈFH",ZodK[l])) if(l>0) l--;

		    laik=l;  // isimenam priespaskutinio skiemens balse ar dvigarsio pabaiga

	        while((!(SkPb[l] & 2))&&(l>0)) l--;

			if(((l==0)||(l==2)&&(KGL[i].priesdNe==1))&&                     //dviskiemenis
			  (KGL[i].KamTip==26)&&(KGL[i].Priegaid!=0)
				&&(!((KGL[i].Priegaid==2)
				&&((ZodK[laik]=='A')||(ZodK[laik]=='E'))
				&&(ZodK[laik-1]!='I'))))
			    KGL[i].KirtViet=1;
		    else
				KGL[i].KirtViet=0;
			}
		}
// prieveiksmiu kirciavimo pabaiga

	if(KGL[i].KirtViet==0)                           // kirciuoti galune
		{
		Variant[varsk].KirtRaide=ilg-GalMasDB[KGL[i].GalNr].KirciuotaRaide;
		Variant[varsk].Priegaide=GalMasDB[KGL[i].GalNr].Priegaide;
		}
	else                                             // kirciuoti kamiena
		{
		l=ilg-strlen(GalMasDB[KGL[i].GalNr].Galune)+1-KGL[i].PriesIlgis;

		for(k=0; k<KGL[i].KircS; k++)
			{if((l>0) && (strcmp(GalMasDB[KGL[i].GalNr].Galune, "S") || (k>0))) l--; //kok|s
			while((!(Variant[varsk].Skiem[l] & 2))&&(l>0)) l--;}
  
// randam kircio vieta kirciuotame skiemenyje ir kircio zenkla
		if(l>0) l--;
		if(KGL[i].Priegaid!=-1)
			{                        
			if(KGL[i].Priegaid==0)
				{
				while(!strchr("ÀEYUIOÁAØËÛÆ", ZodK[l])&&(l>0)) l--;
				}
			else if(KGL[i].Priegaid==2)
				{
				while(!strchr("ÀEYUIOÁAØËÛÆLMNR", ZodK[l])&&(l>0)) l--;
			if(strchr("LMNR", ZodK[l])&&(!strchr("AEIU", ZodK[l-1])
				||(strchr("AEOU", ZodK[l-2])||(ZodK[l-1]=='E')&&(ZodK[l-2]=='I'))&&(!(Variant[varsk].Skiem[l-1] & 2)))) if(l>0) l--;
				}
			else
				{
				while(!strchr("ÀEYUIOÁAØËÛÆ", ZodK[l])&&(l>0)) l--;
				if(strchr("UIO", ZodK[l])&&strchr("AEOU", ZodK[l-1])
				  ||(ZodK[l]=='E')&&(ZodK[l-1]=='I')) if(!(Variant[varsk].Skiem[l] & 2)) if(l>0) l--;
				}

			Variant[varsk].KirtRaide=l+1;
			Variant[varsk].Priegaide=KGL[i].Priegaid;
			} 
		else
			{
			Variant[varsk].KirtRaide=-1;
			Variant[varsk].Priegaide=-1;
			} 
		}

		Variant[varsk].Zodynas=2;
		Variant[varsk].GramForma=KGL[i].Linksnis + (DBKam[KGL[i].KamNr].KamTip << 8);
		Variant[varsk].Prioritetas=KGL[i].Prior;
		Variant[varsk].Tarpt=ApribotiTarptaut(Zodis, ilg-strlen(GalMasDB[KGL[i].GalNr].Galune), KGL[i].tarpt);
		Variant[varsk].KamNr=KGL[i].KamNr;

		if(varsk<VARSK1-1) varsk++;
	}

return varsk;
}
